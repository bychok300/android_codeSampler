<resources>
    <string name="app_name">CodeSamples</string>
    <string name="CreateFile">\n
    <b><font color='navy'>import</font></b> java.io.File;\n
    <b><font color='navy'>import</font></b> java.io.IOException;\n
    \n
    <b><font color='navy'>public</font></b> class CreateFileExample\n
    {\n
        <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
        <b><font color='navy'>try</font></b> {\n
    \n
            File file = <b><font color='navy'>new</font></b> File(\"c:\\newfile.txt\");\n
    \n
            <b><font color='navy'>if</font></b> (file.createNewFile()){\n
                System.out.println(\"File is created!\");\n
            }<b><font color='navy'>else</font></b>{\n
            System.out.println(\"File already exists.\");\n
    }\n
    \n
        } <b><font color='navy'>catch</font></b> (IOException e) {\n
            e.printStackTrace();\n
    }\n
    }\n
    }\n</string>

    <string name ="ConstructFilePath">
        In this tutorial, we will show you three Java examples to construct a file path :

File.separator or System.getProperty(“file.separator”) (Recommended)\n
File file = <b><font color='navy'>new</font></b> File(workingDir, filename); (Recommended)\n
Create the file separator manually. (Not recommend, just for fun)\n\n
1. File.separator\n
Classic Java example to construct a file path, using File.separator or System.getProperty("file.separator"). Both will check the OS and returns the file separator correctly, for example,\n
\n
Windows = \\n
*nix or Mac = /\n
FilePathExample1.java\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FilePathExample1 {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
	  <b><font color='navy'>try</font></b> {\n
\n
		String filename = \"newFile.txt\";\n
		String workingDirectory = System.getProperty(\"user.dir\");\n
\n
		//****************//\n
\n
		String absoluteFilePath = \"\";\n
\n
		//absoluteFilePath = workingDirectory + System.getProperty(\"file.separator\") + filename;\n
		absoluteFilePath = workingDirectory + File.separator + filename;\n
\n
		System.out.println(\"Final filepath : \" + absoluteFilePath);\n
\n
		//****************//\n
\n
		File file = <b><font color='navy'>new</font></b> File(absoluteFilePath);\n
\n
		<b><font color='navy'>if</font></b> (file.createNewFile()) {\n
			System.out.println(\"File is created!\");\n
		} <b><font color='navy'>else</font></b> {\n
			System.out.println(\"File is already existed!\");\n
		}\n

	  } <b><font color='navy'>catch</font></b> (IOException e) {\n
		e.printStackTrace();\n
	  }\n
	}\n
}\n
Output\n

Final filepath : /Users/ABychek/Documents/workspace/maven/fileUtils/newFile.txt\n
File is created!\n


2. new File()\n
Some developers are using new File() API to construct the file path.\n
\n
FilePathExample2.java\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FilePathExample2 {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
	  <b><font color='navy'>try</font></b> {\n
\n
		String filename = \"newFile.txt\";\n
		String workingDirectory = System.getProperty(\"user.dir\");\n
\n
		//****************//\n
\n
		File file = <b><font color='navy'>new</font></b>File(workingDirectory, filename);\n
\n
		//****************//\n

		System.out.println(\"Final filepath : \" + file.getAbsolutePath());\n
		<b><font color='navy'>if</font></b> (file.createNewFile()) {\n
			System.out.println(\"File is created!\");\n
		} <b><font color='navy'>else</font></b> {\n
			System.out.println(\"File is already existed!\");\n
		}\n
\n
	  } <b><font color='navy'>catch</font></b> (IOException e) {\n
		e.printStackTrace();\n
	  }\n
	}\n
}\n
Output\n
\n
Final filepath : /Users/ABychek/Documents/workspace/maven/fileUtils/newFile.txt\n
File is created!\n
\n
\n
3. Manual file separator\n
Check the system OS and create file path manually, just for fun, not recommend.\n
\n
FilePathExample3.java\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FilePathExample3 {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
	  <b><font color='navy'>try</font></b> {\n
\n
		String filename = \"testing.txt\";\n
		String workingDir = System.getProperty(\"user.dir\");\n
\n
		String absoluteFilePath = \"\";\n
\n
		//****************//\n
\n
		String your_os = System.getProperty(\"os.name\").toLowerCase();\n
\n
		<b><font color='navy'>if</font></b> (your_os.indexOf(\"win\") >= 0) {\n
\n
			//if windows\n
			absoluteFilePath = workingDir + \"\\\" + filename;\n
\n
		} <b><font color='navy'>else</font></b> <b><font color='navy'>if</font></b> (your_os.indexOf(\"nix\") >= 0 ||\n
                           your_os.indexOf(\"nux\") >= 0 ||\n
                           your_os.indexOf(\"mac\") >= 0) {\n
\n
			//if unix or mac\n
			absoluteFilePath = workingDir + \"/\" + filename;\n
\n
		}<b><font color='navy'>else</font></b>{\n
\n
			//unknow os?\n
			absoluteFilePath = workingDir + \"/\" + filename;\n
\n
		}\n
\n
		System.out.println(\"Final filepath : \" + absoluteFilePath);\n
\n
		//****************//\n
\n
		File file = <b><font color='navy'>new</font></b>File(absoluteFilePath);\n
\n
		<b><font color='navy'>if</font></b> (file.createNewFile()) {\n
			System.out.println(\"Done\");\n
		} <b><font color='navy'>else</font></b> {\n
			System.out.println(\"File already exists!\");\n
		}\n
\n
	  } <b><font color='navy'>catch</font></b> (IOException e) {\n
		e.printStackTrace();\n
	  }\n
	}\n
}\n
Output\n
\n
Final filepath : /Users/ABychek/Documents/workspace/maven/fileUtils/newFile.txt\n
File is created!\n
\n
    </string>
    
    <string name="SetTheFilePrmission">
        In Java, file permissions are very OS specific: *nix , NTFS (windows) and FAT/FAT32, all have different kind of file permissions. Java comes with some generic file permission to deal with it.\n
\n
Check if the file permission allow :\n
\n
file.canExecute(); – return true, file is executable; false is not.\n
file.canWrite(); – return true, file is writable; false is not.\n
file.canRead(); – return true, file is readable; false is not.\n
Set the file permission :\n
\n
file.setExecutable(boolean); – true, allow execute operations; false to disallow it.\n
file.setReadable(boolean); – true, allow read operations; false to disallow it.\n
file.setWritable(boolean); – true, allow write operations; false to disallow it.\n
In *nix system, you may need to configure more specifies about file permission, e.g set a 777 permission for a file or directory, however, Java IO classes do not have ready method for it, but you can use the following dirty workaround :\n
\n
Runtime.getRuntime().exec(\"chmod 777 file\");\n
File permission example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FilePermissionExample\n
{\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	<b><font color='navy'>try</font></b> {\n
\n
	      File file = <b><font color='navy'>new</font></b>File(\"/ABychek/shellscript.sh\");\n
\n
	      <b><font color='navy'>if</font></b>(file.exists()){\n
	    	  System.out.println(\"Is Execute allow : \" + file.canExecute());\n
		  System.out.println(\"Is Write allow : \" + file.canWrite());\n
		  System.out.println(\"Is Read allow : \" + file.canRead());\n
	      }\n
\n
	      file.setExecutable(false);\n
	      file.setReadable(false);\n
	      file.setWritable(false);\n
\n
	      System.out.println(\"Is Execute allow : \" + file.canExecute());\n
	      System.out.println(\"Is Write allow : \" + file.canWrite());\n
	      System.out.println(\"Is Read allow : \" + file.canRead());\n
\n
	      <b><font color='navy'>if</font></b> (file.createNewFile()){\n
	        System.out.println(\"File is created!\");\n
	      }<b><font color='navy'>else</font></b>{\n
	        System.out.println(\"File already exists.\");\n
	      }\n
\n
    	} <b><font color='navy'>catch</font></b> (IOException e) {\n
	      e.printStackTrace();\n
	    }\n
    }\n
}\n
    </string>
<!-->________________________________________________________________________________________________________________________________</!-->
    <string name="ReadFileEithBIS">
        Here is another example to show how to read a file in Java with BufferedInputStream and DataInputStream classes.\n
\n
The readLine() from the type DataInputStream is deprecated. Sun officially announced this method can not convert property from bytes to characters. It’s advised to use BufferedReader.\n
You may interest to read this How to read file from Java – BufferedReader\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedInputStream;\n
<b><font color='navy'>import</font></b> java.io.DataInputStream;\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> BufferedInputStreamExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		File file = <b><font color='navy'>new</font></b>File(\"C:\\testing.txt\");\n
		FileInputStream fis = <b><font color='navy'>null</font></b>;\n
		BufferedInputStream bis = <b><font color='navy'>null</font></b>;\n
		DataInputStream dis = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
			fis = <b><font color='navy'>new</font></b>FileInputStream(file);\n
\n
			bis = <b><font color='navy'>new</font></b>BufferedInputStream(fis);\n
			dis = <b><font color='navy'>new</font></b> DataInputStream(bis);\n
\n
			while (dis.available() != 0) {\n
				System.out.println(dis.readLine());\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>finally</font></b> {\n
			<b><font color='navy'>try</font></b> {\n
				fis.close();\n
				bis.close();\n
				dis.close();\n
			} <b><font color='navy'>catch</font></b> (IOException ex) {\n
				ex.printStackTrace();\n
			}\n
		}\n
	}\n
}\n
    </string>
    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="ReadFileWithBufferedReader">
        In Java, there are many ways to read a file, here we show you how to use the simplest and most common-used method – BufferedReader.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> BufferedReaderExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		BufferedReader br = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			String sCurrentLine;\n
\n
			br = <b><font color='navy'>new</font></b> BufferedReader(new FileReader(\"C:\\testing.txt\"));\n
\n
			while ((sCurrentLine = br.readLine()) != <b><font color='navy'>null</font></b>) {\n
				System.out.println(sCurrentLine);\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>finally</font></b> {\n
			<b><font color='navy'>try</font></b> {\n
				<b><font color='navy'>if</font></b> (br != <b><font color='navy'>null</font></b>)br.close();\n
			} <b><font color='navy'>catch</font></b> (IOException ex) {\n
				ex.printStackTrace();\n
			}\n
		}\n
\n
	}\n
}\n
See updated example in JDK 7, which use try-with-resources new feature to close file automatically.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> BufferedReaderExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> (BufferedReader br = <b><font color='navy'>new</font></b> BufferedReader(new FileReader(\"C:\\testing.txt\")))\n
		{\n
\n
			String sCurrentLine;\n
\n
			while ((sCurrentLine = br.readLine()) != <b><font color='navy'>null</font></b>) {\n
				System.out.println(sCurrentLine);\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
\n
	}\n
}\n

    </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="WriteFileEithFOS">
    In Java, FileOutputStream is a bytes stream class that\’s used to handle raw binary data. To write the data to file, you have to convert the data into bytes and save it to file. See below full example.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> WriteFileExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		FileOutputStream fop = <b><font color='navy'>null</font></b>;\n
		File file;\n
		String content = \"This is the text content\";\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			file = <b><font color='navy'>new</font></b> File(\"c:/newfile.txt\");\n
			fop = <b><font color='navy'>new</font></b> FileOutputStream(file);\n
\n
			//if file doesn\'t exists, then create it\n
			<b><font color='navy'>if</font></b> (!file.exists()) {\n
				file.createNewFile();\n
			}\n
\n
			// get the content in bytes\n
			byte[] contentInBytes = content.getBytes();\n
\n
			fop.write(contentInBytes);\n
			fop.flush();\n
			fop.close();\n
\n
			System.out.println(\"Done\");\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>finally</font></b> {\n
			<b><font color='navy'>try</font></b> {\n
				<b><font color='navy'>if</font></b> (fop != <b><font color='navy'>null</font></b>) {\n
					fop.close();\n
				}\n
			} <b><font color='navy'>catch</font></b> (IOException e) {\n
				e.printStackTrace();\n
			}\n
		}\n
	}\n
}\n\n
An updated JDK7 example, using new “try resource close” method to handle file easily.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> WriteFileExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		File file = <b><font color='navy'>new</font></b> File(\"c:/newfile.txt\");\n
		String content = \"This is the text content\";\n
\n
		<b><font color='navy'>try</font></b> (FileOutputStream fop = <b><font color='navy'>new</font></b> FileOutputStream(file)) {\n
\n
			// if file doesn\'t exists, then create it\n
			<b><font color='navy'>if</font></b> (!file.exists()) {\n
				file.createNewFile();\n
			}\n
\n
			// get the content in bytes\n
			byte[] contentInBytes = content.getBytes();\n
\n
			fop.write(contentInBytes);\n
			fop.flush();\n
			fop.close();\n
\n
			System.out.println(\"Done\");\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n
}\n

    </string>
    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="WriteFileEithBW">
In Java, BufferedWriter is a character streams class to handle the character data. Unlike bytes stream (convert data into bytes), you can just write the strings, arrays or characters data directly to file.\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedWriter;\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> WriteToFileExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
		<b><font color='navy'>try</font></b> {\n
\n
			String content = \"This is the content to write into file\";\n
\n
			File file = <b><font color='navy'>new</font></b> File(\"/users/ABychek/filename.txt\");\n
\n
			// if file doesnt exists, then create it\n
			<b><font color='navy'>if</font></b> (!file.exists()) {\n
				file.createNewFile();\n
			}\n
\n
			FileWriter fw = <b><font color='navy'>new</font></b> FileWriter(file.getAbsoluteFile());\n
			BufferedWriter bw = <b><font color='navy'>new</font></b> BufferedWriter(fw);\n
			bw.write(content);\n
			bw.close();\n
\n
			System.out.println(\"Done\");\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n
}\n
    </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="AppendContentToFile">
        FileWritter, a character stream to write characters to file. By default, it will replace all the existing content with new content, however, when you specified a true (boolean) value as the second argument in FileWritter constructor, it will keep the existing content and append the new content in the end of the file.\n
\n
1. Replace all existing content with new content.\n
\n
new FileWriter(file);\n
2. Keep the existing content and append the new content in the end of the file.\n
\n
new FileWriter(file,true);\n
Append file example\n
A text file named “javaio-appendfile.txt” and contains the following content.\n
\n
ABC Hello\n
Append new content with new FileWriter(file,true)\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.BufferedWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> AppendToFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	<b><font color='navy'>try</font></b>{\n
    		String data = \" This content will append to the end of the file\";\n
\n
    		File file =new File(\"javaio-appendfile.txt\");\n
\n
    		//if file doesnt exists, then create it\n
    		<b><font color='navy'>if</font></b>(!file.exists()){\n
    			file.createNewFile();\n
    		}\n
\n
    		//true = append file\n
    		FileWriter fileWritter = <b><font color='navy'>new</font></b> FileWriter(file.getName(),true);\n
    	        BufferedWriter bufferWritter = <b><font color='navy'>new</font></b> BufferedWriter(fileWritter);\n
    	        bufferWritter.write(data);\n
    	        bufferWritter.close();\n
\n
	        System.out.println(\"Done\");\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
    		e.printStackTrace();\n
    	}\n
    }\n
}\n

\n
Result:\n\n
Now, the text file “javaio-appendfile.txt” content is updated\n
\n
ABC Hello This content will append to the end of the file\n


    </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="DeleteFile">
        No nonsense, just issue the File.delete() to delete a file, it will return a boolean value to indicate the delete operation status; true if the file is deleted; false if failed.\n
\n
Example\n\n
In this example, it will delete a log file named “c:\\logfile20100131.log”.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> DeleteFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		File file = <b><font color='navy'>new</font></b> File(\"c:\\logfile20100131.log\");\n
\n
    		<b><font color='navy'>if</font></b>(file.delete()){\n
    			System.out.println(file.getName() + \" is deleted!\");\n
    		}<b><font color='navy'>else</font></b>{\n
    			System.out.println(\"Delete operation is failed.\");\n
    		}\n
\n
    	}<b><font color='navy'>catch</font></b>(Exception e){\n
\n
    		e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
    </string>
    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="DeleteFilesWithCertainExtensionOnly">
        In Java, you can implements the FilenameFilter, override the accept(File dir, String name) method, to perform the file filtering function.\n
\n
In this example, we show you how to use FilenameFilter to list out all files that are end with “.txt” extension in folder “c:\\folder“, and then delete it.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.*;\n
\n
<b><font color='navy'>public class</font></b> FileChecker {\n
\n
   <b><font color='navy'>private static final</font></b> String FILE_DIR = \"c:\\folder\";\n
   <b><font color='navy'>private static final</font></b> String FILE_TEXT_EXT = \".txt\";\n
\n
   <b><font color='navy'>public static void</font></b> main(String args[]) {\n
	new FileChecker().deleteFile(FILE_DIR,FILE_TEXT_EXT);\n
   }\n
\n
   public void deleteFile(String folder, String ext){\n
\n
     GenericExtFilter filter = <b><font color='navy'>new</font></b> GenericExtFilter(ext);\n
     File dir = <b><font color='navy'>new</font></b> File(folder);\n
\n
     //list out all the file name with .txt extension\n
     String[] list = dir.list(filter);\n
\n
     <b><font color='navy'>if</font></b> (list.length == 0) return;\n
\n
     File fileDelete;\n
\n
     <b><font color='navy'>for</font></b> (String file : list){\n
   	String temp = <b><font color='navy'>new</font></b> StringBuffer(FILE_DIR)\n
                      .append(File.separator)\n
                      .append(file).toString();\n
    	fileDelete = <b><font color='navy'>new</font></b> File(temp);\n
    	boolean isdeleted = fileDelete.delete();\n
    	System.out.println(\"file : \" + temp + \" is deleted : \" + isdeleted);\n
     }\n
   }\n
\n
   //inner class, generic extension filter\n
   <b><font color='navy'>public class</font></b> GenericExtFilter implements FilenameFilter {\n
\n
       private String ext;\n
\n
       public GenericExtFilter(String ext) {\n
         this.ext = ext;\n
       }\n
\n
       public boolean accept(File dir, String name) {\n
         return (name.endsWith(ext));\n
       }\n
    }\n
}\n

    </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
        <string name="FindFilesWithCertainExtensionOnly">
A FilenameFilter example, it will only display files that use “.jpg” extension in folder “c:\\folder“.\n
\n\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.*;\n
\n
<b><font color='navy'>public class</font></b> FindCertainExtension {\n
\n
	<b><font color='navy'>private static final</font></b> String FILE_DIR = \"c:\\folder\";\n
	<b><font color='navy'>private static final</font></b> String FILE_TEXT_EXT = \".jpg\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String args[]) {\n
		new FindCertainExtension().listFile(FILE_DIR, FILE_TEXT_EXT);\n
	}\n
\n
	public void listFile(String folder, String ext) {\n
\n
		GenericExtFilter filter = <b><font color='navy'>new</font></b> GenericExtFilter(ext);\n
\n
		File dir = <b><font color='navy'>new</font></b> File(folder);\n
\n
		<b><font color='navy'>if</font></b>(dir.isDirectory()==false){\n
			System.out.println(\"Directory does not exists : \" + FILE_DIR);\n
			return;\n
		}\n
\n
		// list out all the file name and filter by the extension\n
		String[] list = dir.list(filter);\n
\n
		<b><font color='navy'>if</font></b> (list.length == 0) {\n
			System.out.println(\"no files end with : \" + ext);\n
			return;\n
		}\n
\n
		<b><font color='navy'>for</font></b> (String file : list) {\n
			String temp = <b><font color='navy'>new</font></b> StringBuffer(FILE_DIR).append(File.separator)\n
					.append(file).toString();\n
			System.out.println(\"file : \" + temp);\n
		}\n
	}\n
\n
	// inner class, generic extension filter\n
	<b><font color='navy'>public class</font></b> GenericExtFilter implements FilenameFilter {\n
\n
		private String ext;\n
\n
		public GenericExtFilter(String ext) {\n
			this.ext = ext;\n
		}\n
\n
		public boolean accept(File dir, String name) {\n
			return (name.endsWith(ext));\n
		}\n
	}\n
}\n
        </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="RenameFile">
        Java comes with renameTo() method to rename a file. However , this method is really platform-dependent: you may successfully rename a file in *nix but failed in Windows. So, the return value (true if the file rename successful, false if failed) should always be checked to make sure the file is rename successful.\n
\n
File.renameTo() Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> RenameFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
		File oldfile =new File(\"oldfile.txt\");\n
		File newfile =new File(\"newfile.txt\");\n
\n
		<b><font color='navy'>if</font></b>(oldfile.renameTo(newfile)){\n
			System.out.println(\"Rename succesful\");\n
		}<b><font color='navy'>else</font></b>{\n
			System.out.println(\"Rename failed\");\n
		}\n
\n
    }\n
}\n
    </string>
    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="CopyFile">
        Java didnt comes with any ready make file copy function, you have to manual create the file copy process. To copy file, just convert the file into a bytes stream with FileInputStream and write the bytes into another file with FileOutputStream.\n
\n
The overall processes are quite simple, just do not understand why Java doesn’t include this method into the java.io.File class.\n
\n
File copy example\n
Here’s an example to copy a file named “Afile.txt” to another file named “Bfile.txt”. If the “Bfile.txt” is exists, the existing content will be replace, else it will create with the content of the “Afile.txt”.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.OutputStream;\n
\n
<b><font color='navy'>public class</font></b> CopyFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	InputStream inStream = <b><font color='navy'>null</font></b>;\n
	OutputStream outStream = <b><font color='navy'>null</font></b>;\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	    File afile =new File(\"Afile.txt\");\n
    	    File bfile =new File(\"Bfile.txt\");\n
\n
    	    inStream = <b><font color='navy'>new</font></b> FileInputStream(afile);\n
    	    outStream = <b><font color='navy'>new</font></b> FileOutputStream(bfile);\n
\n
    	    byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
    	    int length;\n
    	    //copy the file content in bytes\n
    	    while ((length = inStream.read(buffer)) > 0){\n
\n
    	    	outStream.write(buffer, 0, length);\n
\n
    	    }\n
\n
    	    inStream.close();\n
    	    outStream.close();\n
\n
    	    System.out.println(\"File is copied successful!\");\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
    		e.printStackTrace();\n
    	}\n
    }\n
}\n
    </string>

    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="MoveFileToAnotherDirectory">
        Java.io.File does not contains any ready make move file method, but you can workaround with the following two alternatives :\n
\n
File.renameTo().\n\n
Copy to new file and delete the original file.\n\n
In the below two examples, you move a file “C:\\folderA\\Afile.txt” from one directory to another directory with the same file name “C:\\folderB\\Afile.txt“.\n
\n
1. File.renameTo()\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> MoveFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	   File afile =new File(\"C:\\folderA\\Afile.txt\");\n
\n
    	   <b><font color='navy'>if</font></b>(afile.renameTo(new File(\"C:\\folderB\\\" + afile.getName()))){\n
    		System.out.println(\"File is moved successful!\");\n
    	   }<b><font color='navy'>else</font></b>{\n
    		System.out.println(\"File is failed to move!\");\n
    	   }\n
\n
    	}<b><font color='navy'>catch</font></b>(Exception e){\n
    		e.printStackTrace();\n
    	}\n
    }\n
}\n
\n
 \n
2. Copy and Delete\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.OutputStream;\n
\n
<b><font color='navy'>public class</font></b> MoveFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	InputStream inStream = <b><font color='navy'>null</font></b>;\n
	OutputStream outStream = <b><font color='navy'>null</font></b>;\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	    File afile =new File(\"C:\\folderA\\Afile.txt\");\n
    	    File bfile =new File(\"C:\\folderB\\Afile.txt\");\n
\n
    	    inStream = <b><font color='navy'>new</font></b> FileInputStream(afile);\n
    	    outStream = <b><font color='navy'>new</font></b> FileOutputStream(bfile);\n
\n
    	    byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
    	    int length;\n
    	    //copy the file content in bytes\n
    	    while ((length = inStream.read(buffer)) > 0){\n
\n
    	    	outStream.write(buffer, 0, length);\n
\n
    	    }\n
\n
    	    inStream.close();\n
    	    outStream.close();\n
\n
    	    //delete the original file\n
    	    afile.delete();\n
\n
    	    System.out.println(\"File is copied successful!\");\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
    	    e.printStackTrace();\n
    	}\n
    }\n
}\n
    </string>
    <!-->________________________________________________________________________________________________________________________________</!-->
    <string name="MakeFileReadOnly">
A Java program to demonstrate the use of java.io.File setReadOnly() method to make a file read only. Since JDK 1.6, a new setWritable() method is provided to make a file to be writable again.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FileReadAttribute\n
{\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException\n
    {\n
    	File file = <b><font color='navy'>new</font></b> File(\"c:/file.txt\");\n
\n
    	//mark this file as read only, since jdk 1.2\n
    	file.setReadOnly();\n
\n
    	<b><font color='navy'>if</font></b>(file.canWrite()){\n
    	     System.out.println(\"This file is writable\");\n
    	}<b><font color='navy'>else</font></b>{\n
    	     System.out.println(\"This file is read only\");\n
    	}\n
\n
    	//revert the operation, mark this file as writable, since jdk 1.6\n
    	file.setWritable(true);\n
\n
    	<b><font color='navy'>if</font></b>(file.canWrite()){\n
    	     System.out.println(\"This file is writable\");\n
    	}<b><font color='navy'>else</font></b>{\n
    	     System.out.println(\"This file is read only\");\n
    	}\n
    }\n
}\n
\n
 \n
Output:\n
This file is read only\n
This file is writable\n
    </string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GetTheFileCreationDate">
		There are no official way to get the file creation date in Java. However, you can use the following workaround to get the file creation date in Windows platform.\n
\n
How it work\n\n
In Windows command prompt, type the command to list the file creation date.\n
\n
C:\>cmd /c dir c:\logfile.log /tc\n
 Volume in drive C has no label.\n
 Volume Serial Number is 0410-1EC3\n
\n
 Directory of c:\\n
\n
31/05/2010  08:05                14 logfile.log\n
               1 File(s)             14 bytes\n
               0 Dir(s)  35,389,460,480 bytes free\n
The “31/05/2010 08:05” is what you need. The idea is use the Java “Runtime.getRuntime().exec” to execute the above command, hold the output, and parse it by lines until you get the date and time.\n
\n
\n
 \n
Example\n\n
In this example, it will get the creation date of file (c:\\logfile.log).\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
<b><font color='navy'>import</font></b> java.util.StringTokenizer;\n
\n
<b><font color='navy'>public class</font></b> GetFileCreationDateExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		Process proc =\n
    		   Runtime.getRuntime().exec(\"cmd /c dir c:\\logfile.log /tc\");\n
\n
    		BufferedReader br =\n
    		   <b><font color='navy'>new</font></b> BufferedReader(\n
    		      <b><font color='navy'>new</font></b> InputStreamReader(proc.getInputStream()));\n
\n
    		String data =\"\";\n
\n
    		//it\'s quite stupid but work\n
    		<b><font color='navy'>for</font></b>(int i=0; i &lt; 6; i++){\n
    			data = br.readLine();\n
    		}\n
\n
    		System.out.println(\"Extracted value : \" + data);\n
\n
    		//split by space\n
    		StringTokenizer st = <b><font color='navy'>new</font></b> StringTokenizer(data);\n
    		String date = st.nextToken();//Get date\n
    		String time = st.nextToken();//Get time\n
\n
    		System.out.println(\"Creation Date  : \" + date);\n
    		System.out.println(\"Creation Time  : \" + time);\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    		e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
Extracted value : 31/05/2010  08:05  14 logfile.log\n
Creation Date  : 31/05/2010\n
Creation Time  : 08:05\n


	</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GetTheFileLastModifiedDate">
		In Java, you can use the File.lastModified() to get the file’s last modified timestamps. This method will returns the time in milliseconds (long value), you may to format it with SimpleDateFormat to make it a human readable format.\n
\n
File Last Modified\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.text.SimpleDateFormat;\n
\n
<b><font color='navy'>public class</font></b> GetFileLastModifiedExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
	File file = <b><font color='navy'>new</font></b> File(\"c:\\logfile.log\");\n
\n
	System.out.println(\"Before Format : \" + file.lastModified());\n
\n
	SimpleDateFormat sdf = <b><font color='navy'>new</font></b> SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\n
\n
	System.out.println(\"After Format : \" + sdf.format(file.lastModified()));\n
    }\n
}\n
\n
 \n
Result\n\n
Before Format : 1275265349422\n
After Format : 05/31/2010 08:22:29\n
\n

		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ChangeTheFileLastModifiedDate">
		Here’s an example to show the use of File.setLastModified() to change the file’s last modified date. This method accept the new modified date in milliseconds (long type), some data type conversion are required.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.text.ParseException;\n
<b><font color='navy'>import</font></b> java.text.SimpleDateFormat;\n
<b><font color='navy'>import</font></b> java.util.Date;\n
\n
<b><font color='navy'>public class</font></b> ChangeFileLastModifiedExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		File file = <b><font color='navy'>new</font></b> File(\"C:\\logfile.log\");\n
\n
    		//print the original last modified date\n
    		SimpleDateFormat sdf = <b><font color='navy'>new</font></b> SimpleDateFormat(\"MM/dd/yyyy\");\n
    		System.out.println(\"Original Last Modified Date : \"\n
    				+ sdf.format(file.lastModified()));\n
\n
    		//set this date\n
    		String newLastModified = \"01/31/1998\";\n
\n
    		//need convert the above date to milliseconds in long value\n
    		Date newDate = sdf.parse(newLastModified);\n
    		file.setLastModified(newDate.getTime());\n
\n
    		//print the latest last modified date\n
    		System.out.println(\"Lastest Last Modified Date : \"\n
    				+ sdf.format(file.lastModified()));\n
\n
    	}<b><font color='navy'>catch</font></b>(ParseException e){\n
\n
    		e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
Result\n\n
Original Last Modified Date : 05/31/2010\n
Lastest Last Modified Date : 01/31/1998\n

		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GetFileSize">
		In Java, you can use the File.length() method to get the file size in bytes.\n
\n
Example\n\n
Get an image file (c:\\java_xml_logo.jpg) 14KB, and display the file size.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> FileSizeExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
		File file =new File(\"c:\\java_xml_logo.jpg\");\n
\n
		<b><font color='navy'>if</font></b>(file.exists()){\n
\n
			double bytes = file.length();\n
			double kilobytes = (bytes / 1024);\n
			double megabytes = (kilobytes / 1024);\n
			double gigabytes = (megabytes / 1024);\n
			double terabytes = (gigabytes / 1024);\n
			double petabytes = (terabytes / 1024);\n
			double exabytes = (petabytes / 1024);\n
			double zettabytes = (exabytes / 1024);\n
			double yottabytes = (zettabytes / 1024);\n
\n
			System.out.println(\"bytes : \" + bytes);\n
			System.out.println(\"kilobytes : \" + kilobytes);\n
			System.out.println(\"megabytes : \" + megabytes);\n
			System.out.println(\"gigabytes : \" + gigabytes);\n
			System.out.println(\"terabytes : \" + terabytes);\n
			System.out.println(\"petabytes : \" + petabytes);\n
			System.out.println(\"exabytes : \" + exabytes);\n
			System.out.println(\"zettabytes : \" + zettabytes);\n
			System.out.println(\"yottabytes : \" + yottabytes);\n
		}<b><font color='navy'>else</font></b>{\n
			 System.out.println(\"File does not exists!\");\n
		}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
bytes : 13900.0\n
kilobytes : 13.57421875\n
megabytes : 0.013256072998046875\n
gigabytes : 1.2945383787155151E-5\n
terabytes : 1.2641976354643703E-8\n
petabytes : 1.234568003383174E-11\n
exabytes : 1.205632815803881E-14\n
zettabytes : 1.1773757966834775E-17\n
yottabytes : 1.1497810514487085E-20\n\n

		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GetFilepathOfFile">
		The File.getAbsolutePath() will give you the full complete path name (filepath + filename) of a file.\n
\n
For example,\n
\n
File file = File(\"C:\\abcfolder\\textfile.txt\");\n
System.out.println(\"Path : \" + file.getAbsolutePath());\n
It will display the full path : “Path : C:\\abcfolder\\textfile.txt“.\n
\n
In most cases, you may just need to get the file path only “C:\\abcfolder\\“. With the help of substring() and lastIndexOf() menthods, you can extract the file path easily :\n
\n
File file = File(\"C:\\abcfolder\\textfile.txt\");\n
String absolutePath = file.getAbsolutePath();\n
String filePath = absolutePath.\n
    substring(0,absolutePath.lastIndexOf(File.separator));\n
Get file path example\n
In this example, it create a temporary file, and print out the file path of it.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> AbsoluteFilePathExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	    File temp = File.createTempFile(\"i-am-a-temp-file\", \".tmp\" );\n
\n
    	    String absolutePath = temp.getAbsolutePath();\n
    	    System.out.println(\"File path : \" + absolutePath);\n
\n
    	    String filePath = absolutePath.\n
    	    	     substring(0,absolutePath.lastIndexOf(File.separator));\n
\n
    	    System.out.println(\"File path : \" + filePath);\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    	    e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
File path : C:\Users\ABychek\AppData\Local\Temp\i-am-a-temp-file69424.tmp\n
File path : C:\Users\ABychek\AppData\Local\Temp\n
		</string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GetTheTotalNumberOfLinesOfFile">
		LineNumberReader.readLine() method and accumulate it as the total number of lines. A line is considered a line if it ends with a line feed (\"\\n\") or a carriage return (\"\\r\").\n
\n
Example\n\n
A text file named “c:\\ihave10lines.txt”, contains 10 lines\n
\n
Line 1\n
Line 2\n
Line 3\n
Line 4\n
Line 5\n
Line 6\n
Line 7\n
Line 8\n
Line 9\n
Line 10\n
Counts the line\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.LineNumberReader;\n
\n
<b><font color='navy'>public class</font></b> LineNumberReaderExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		File file =new File(\"c:\\ihave10lines.txt\");\n
\n
    		<b><font color='navy'>if</font></b>(file.exists()){\n
\n
    		    FileReader fr = <b><font color='navy'>new</font></b> FileReader(file);\n
    		    LineNumberReader lnr = <b><font color='navy'>new</font></b> LineNumberReader(fr);\n
\n
    		    int linenumber = 0;\n
\n
    	            while (lnr.readLine() != <b><font color='navy'>null</font></b>){\n
    	        	linenumber++;\n
    	            }\n
\n
    	            System.out.println(\"Total number of lines : \" + linenumber);\n
\n
    	            lnr.close();\n
\n
\n
    		}<b><font color='navy'>else</font></b>{\n
    			 System.out.println(\"File does not exists!\");\n
    		}\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
    		e.printStackTrace();\n
    	}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
Total number of lines : 10\n
		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="CheckIfFileExists">
		To determine whether a file is exist in your file system, use the Java IO File.exists().\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.*;\n
\n
<b><font color='navy'>public class</font></b> FileChecker {\n
\n
  <b><font color='navy'>public static void</font></b> main(String args[]) {\n
\n
	  File f = <b><font color='navy'>new</font></b> File(\"c:\\ABychek.txt\");\n
\n
	  <b><font color='navy'>if</font></b>(f.exists()){\n
		  System.out.println(\"File existed\");\n
	  }<b><font color='navy'>else</font></b>{\n
		  System.out.println(\"File not found!\");\n
	  }\n
\n
  }\n
\n
}\n
		</string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="CheckIfFileIsHidden">
		A Java program to demonstrate the use of java.io.File isHidden() to check if a file is hidden.\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> FileHidden\n
{\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException\n
    {\n
    	File file = <b><font color='navy'>new</font></b> File(\"c:/hidden-file.txt\");\n
\n
    	<b><font color='navy'>if</font></b>(file.isHidden()){\n
    		System.out.println(\"This file is hidden\");\n
    	}<b><font color='navy'>else</font></b>{\n
    		System.out.println(\"This file is not hidden\");\n
    	}\n
    }\n
}\n\n
Note\n
The isHidden() method is system dependent, on UNIX platform, a file is considered hidden if it’s name is begins with a “dot” symbol (\".\"); On Microsoft Windows platform, a file is considered to be hidden, if it’s marked as hidden in the file properties.\n

		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ReadUTF8EncodedDataFromFile">
		Here’s the example to demonstrate how to read “UTF-8” encoded data from a file in Java\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
<b><font color='navy'>import</font></b> java.io.UnsupportedEncodingException;\n
\n
<b><font color='navy'>public class</font></b> test {\n
	<b><font color='navy'>public static void</font></b> main(String[] args){\n
\n
	<b><font color='navy'>try</font></b> {\n
		File fileDir = <b><font color='navy'>new</font></b> File(\"c:\\temp\\test.txt\");\n
\n
		BufferedReader in = <b><font color='navy'>new</font></b> BufferedReader(\n
		   <b><font color='navy'>new</font></b> InputStreamReader(\n
                      <b><font color='navy'>new</font></b> FileInputStream(fileDir), \"UTF8\"));\n
\n
		String str;\n
\n
		while ((str = in.readLine()) != <b><font color='navy'>null</font></b>) {\n
		    System.out.println(str);\n
		}\n
\n
                in.close();\n
	    }\n
	    <b><font color='navy'>catch</font></b> (UnsupportedEncodingException e)\n
	    {\n
			System.out.println(e.getMessage());\n
	    }\n
	    <b><font color='navy'>catch</font></b> (IOException e)\n
	    {\n
			System.out.println(e.getMessage());\n
	    }\n
	    <b><font color='navy'>catch</font></b> (Exception e)\n
	    {\n
			System.out.println(e.getMessage());\n
	    }\n
	}\n
}\n\n
Result\n
Website UTF-8\n
?? UTF-8\n
??????? UTF-8\n\n
Do not worry about the symbol “???”, this is because my output console is not support the UTF-8 data. The variable “str” is storing exactly same “UTF-8” encoded data as showed in the text file.\n
		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="WriteUTF8EncodedDataIntoFile">
		Here’s the Java example to demonstrate how to write UTF-8 encoded data into a text file – “c:\\temp\\test.txt”\n

P.S Symbol “??” is some “UTF-8” data in Chinese and Japanese\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedWriter;\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.OutputStreamWriter;\n
<b><font color='navy'>import</font></b> java.io.UnsupportedEncodingException;\n
<b><font color='navy'>import</font></b> java.io.Writer;\n
\n
<b><font color='navy'>public class</font></b> test {\n
	<b><font color='navy'>public static void</font></b> main(String[] args){\n
\n
	  <b><font color='navy'>try</font></b> {\n
		File fileDir = <b><font color='navy'>new</font></b> File(\"c:\\temp\\test.txt\");\n
			\n
		Writer out = <b><font color='navy'>new</font></b> BufferedWriter(new OutputStreamWriter(\n
			new FileOutputStream(fileDir), \"UTF8\"));\n
\n
		out.append(\"Website UTF-8\").append(\"\\r\\n\");\n
		out.append(\"?? UTF-8\").append(\"\\r\\n\");\n
		out.append(\"??????? UTF-8\").append(\"\\r\\n\");\n
		\n
		out.flush();\n
		out.close();\n
	        \n
	    } \n
	   <b><font color='navy'>catch</font></b> (UnsupportedEncodingException e) \n
	   {\n
		System.out.println(e.getMessage());\n
	   } \n
	   <b><font color='navy'>catch</font></b> (IOException e) \n
	   {\n
		System.out.println(e.getMessage());\n
	    }\n
	   <b><font color='navy'>catch</font></b> (Exception e)\n
	   {\n
		System.out.println(e.getMessage());\n
	   } \n
	}	\n
}\n
		</string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="AssignFileContentIntoVariable">
	Most people will read the file content and assign to StringBuffer or String line by line. Here\’s another trick that may interest you – how to assign whole file content into a variable with one Java\’s statement, try it :)\n
\n
Example\n\n
In this example, you will use DataInputStreamto convert all the content into bytes, and create a String variable with the converted bytes.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.DataInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
\n
<b><font color='navy'>public class</font></b> App{\n
\n
	<b><font color='navy'>public static void</font></b> main (String args[]) {\n
\n
	<b><font color='navy'>try</font></b>{\n
\n
	         DataInputStream dis =\n
		    <b><font color='navy'>new</font></b> DataInputStream (\n
		    	 <b><font color='navy'>new</font></b> FileInputStream (\"c:\\logging.log\"));\n
\n
		 byte[] datainBytes = <b><font color='navy'>new</font></b> byte[dis.available()];\n
		 dis.readFully(datainBytes);\n
		 dis.close();\n
\n
		 String content = <b><font color='navy'>new</font></b> String(datainBytes, 0, datainBytes.length);\n
\n
		 System.out.println(content);\n
\n
	}<b><font color='navy'>catch</font></b>(Exception ex){\n
		ex.printStackTrace();\n
	}\n
\n
  }\n
}\n
\n
 \n
Output\n
This will print out all the “logging.log” file content.\n
\n
10:21:29,425  INFO Version:15 - Hibernate Annotations 3.3.0.GA\n
10:21:29,441  INFO Environment:509 - Hibernate 3.2.3\n
10:21:29,441  INFO Environment:542 - hibernate.properties not found\n
10:21:29,456  INFO Environment:676 - Bytecode provider name : cglib\n
10:21:29,456  INFO Environment:593 - using JDK 1.4 java.sql.Timestamp handling\n
............\n
	</string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="GenerateFileChecksumValue">
		Here is a simple example to demonstrate how to generate a file checksum value with “SHA-1” mechanism in Java.\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.security.MessageDigest;\n
\n
<b><font color='navy'>public class</font></b> TestCheckSum {\n
\n
  <b><font color='navy'>public static void</font></b> main(String args[]) <b><font color='navy'>throws</font></b> Exception {\n
\n
    String datafile = \"c:\\INSTLOG.TXT\";\n
\n
    MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n
    FileInputStream fis = <b><font color='navy'>new</font></b> FileInputStream(datafile);\n
    byte[] dataBytes = <b><font color='navy'>new</font></b> byte[1024];\n
\n
    int nread = 0;\n
\n
    while ((nread = fis.read(dataBytes)) != -1) {\n
      md.update(dataBytes, 0, nread);\n
    };\n
\n
    byte[] mdbytes = md.digest();\n
\n
    //convert the byte to hex format\n
    StringBuffer sb = <b><font color='navy'>new</font></b> StringBuffer(\"\");\n
    <b><font color='navy'>for</font></b> (int i = 0;i &lt; mdbytes.length; i++) {\n
    	sb.append(Integer.toString((mdbytes[i] &amp; 0xff) + 0x100, 16).substring(1));\n
    }\n
\n
    System.out.println(\"Digest(in hex format):: \" + sb.toString());\n
\n
  }\n
}\n
Result\n\n
Digest(in hex format):: bf35fa420d3e0f669e27b337062bf19f510480d4\n
The \"INSTLOG.TXT\" file has a \"bf35fa420d3e0f669e27b337062bf19f510480d4\" SHA-1 checksum value.\n
\n
For checksum value in MD5 format , you need to change the MessageDigest :\n
\n
MessageDigest md = MessageDigest.getInstance(\"MD5\");\n


		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ConvertFileIntoAnArrayOfBytes">
		The Java.io.FileInputStream can used to convert a File object into an array of bytes. In this example, you read a file from “C:\\testing.txt“, convert it into an array of bytes and print out the content.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.common;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
\n
<b><font color='navy'>public class</font></b> FileToArrayOfBytes\n
{\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	FileInputStream fileInputStream=<b><font color='navy'>null</font></b>;\n
\n
        File file = <b><font color='navy'>new</font></b> File(\"C:\\testing.txt\");\n
\n
        byte[] bFile = <b><font color='navy'>new</font></b> byte[(int) file.length()];\n
\n
        <b><font color='navy'>try</font></b> {\n
            //convert file into array of bytes\n
	    fileInputStream = <b><font color='navy'>new</font></b> FileInputStream(file);\n
	    fileInputStream.read(bFile);\n
	    fileInputStream.close();\n
\n
	    <b><font color='navy'>for</font></b> (int i = 0;i &lt; bFile.length; i++) {\n
	       	System.out.print((char)bFile[i]);\n
            }\n
\n
	    System.out.println(\"Done\");\n
        }<b><font color='navy'>catch</font></b>(Exception e){\n
        	e.printStackTrace();\n
        }\n
    }\n
}\n
		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ConvertArrayOfBytesIntoFile">
		The Java.io.FileOutputStream can used to convert an array of bytes into a file. In this example, you read a file from “C:\\testing.txt“, and convert it into an array of bytes, and write it into another file “C:\\testing2.txt“.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.common;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
\n
<b><font color='navy'>public class</font></b> ArrayOfBytesToFile\n
{\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	FileInputStream fileInputStream=<b><font color='navy'>null</font></b>;\n
\n
        File file = <b><font color='navy'>new</font></b> File(\"C:\\testing.txt\");\n
\n
        byte[] bFile = <b><font color='navy'>new</font></b> byte[(int) file.length()];\n
\n
        <b><font color='navy'>try</font></b> {\n
            //convert file into array of bytes\n
	    fileInputStream = <b><font color='navy'>new</font></b> FileInputStream(file);\n
	    fileInputStream.read(bFile);\n
	    fileInputStream.close();\n
\n
	    //convert array of bytes into file\n
	    FileOutputStream fileOuputStream =\n
                  <b><font color='navy'>new</font></b> FileOutputStream(\"C:\\testing2.txt\");\n
	    fileOuputStream.write(bFile);\n
	    fileOuputStream.close();\n
\n
	    System.out.println(\"Done\");\n
        }<b><font color='navy'>catch</font></b>(Exception e){\n
            e.printStackTrace();\n
        }\n
    }\n
}\n
		</string>

	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ConvertStringToInputStream">
		A simple Java program to convert a String to InputStream, and use BufferedReader to read and display the converted InputStream.\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.ByteArrayInputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
\n
<b><font color='navy'>public class</font></b> StringToInputStreamExample {\n
    <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException {\n
	String str = \"This is a String ~ GoGoGo\";\n
\n
	// convert String into InputStream\n
	InputStream is = <b><font color='navy'>new</font></b> ByteArrayInputStream(str.getBytes());\n
\n
	// read it with BufferedReader\n
	BufferedReader br = <b><font color='navy'>new</font></b> BufferedReader(new InputStreamReader(is));\n
\n
	String line;\n
	while ((line = br.readLine()) != <b><font color='navy'>null</font></b>) {\n
		System.out.println(line);\n
	}\n
\n
	br.close();\n
   }\n
}\n
		</string>
	<!-->________________________________________________________________________________________________________________________________</!-->
	<string name="ConvertInputStreamToString">
		In Java, you can use BufferedReader + InputStreamReader to convert InputStream to String.\n
\n
InputStreamToStringExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.ByteArrayInputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
\n
<b><font color='navy'>public class</font></b> InputStreamToStringExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException {\n
\n
		// intilize an InputStream\n
		InputStream is =\n
                     <b><font color='navy'>new</font></b> ByteArrayInputStream(\"file content..blah blah\".getBytes());\n
\n
		String result = getStringFromInputStream(is);\n
\n
		System.out.println(result);\n
		System.out.println(\"Done\");\n
\n
	}\n
\n
	// convert InputStream to String\n
	<b><font color='navy'>private static</font></b> String getStringFromInputStream(InputStream is) {\n
\n
		BufferedReader br = <b><font color='navy'>null</font></b>;\n
		StringBuilder sb = <b><font color='navy'>new</font></b> StringBuilder();\n
\n
		String line;\n
		<b><font color='navy'>try</font></b> {\n
\n
			br = <b><font color='navy'>new</font></b> BufferedReader(new InputStreamReader(is));\n
			while ((line = br.readLine()) != <b><font color='navy'>null</font></b>) {\n
				sb.append(line);\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>finally</font></b> {\n
			<b><font color='navy'>if</font></b> (br != <b><font color='navy'>null</font></b>) {\n
				<b><font color='navy'>try</font></b> {\n
					br.close();\n
				} <b><font color='navy'>catch</font></b> (IOException e) {\n
					e.printStackTrace();\n
				}\n
			}\n
		}\n
\n
		return sb.toString();\n
\n
	}\n
\n
}\n\n
Output\n
\n
file content..blah blah\n
Done\n
		</string>

		<string name="ConvertFileToHex">
		A simple Java program to demonstrate the use of String formatter(“%02X “) to convert a File into Hex value. The attached comments should be self-explanatory.
		\n
		Example\n
		<b><font color='navy'>package</font></b> com.ABychek;\n
		\n
		<b><font color='navy'>import</font></b> java.io.File;\n
		<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
		<b><font color='navy'>import</font></b> java.io.IOException;\n
		<b><font color='navy'>import</font></b> java.io.InputStream;\n
		<b><font color='navy'>import</font></b> java.io.PrintStream;\n
		\n
		<b><font color='navy'>public class</font></b> File2Hex\n
		{\n
		    <b><font color='navy'>public static void</font></b> convertToHex(PrintStream out, File file) <b><font color='navy'>throws</font></b> IOException {\n
			InputStream is = <b><font color='navy'>new</font></b> FileInputStream(file);\n
		\n
			int bytesCounter =0;\n
			int value = 0;\n
			StringBuilder sbHex = <b><font color='navy'>new</font></b> StringBuilder();\n
			StringBuilder sbText = <b><font color='navy'>new</font></b> StringBuilder();\n
			StringBuilder sbResult = <b><font color='navy'>new</font></b> StringBuilder();\n
		\n
			while ((value = is.read()) != -1) {\n
			    //convert to hex value with \"X\" formatter\n
		            sbHex.append(String.format(\"02X \", value));\n
		\n
			    //If the chracater is not convertable, just print a dot symbol \".\"\n
			    <b><font color='navy'>if</font></b> (!Character.isISOControl(value)) {\n
			      	sbText.append((char)value);\n
			    }<b><font color='navy'>else</font></b> {\n
			        sbText.append(\".\");\n
			    }\n
		\n
			    //if 16 bytes are read, reset the counter,\n
		            //clear the StringBuilder for formatting purpose only.\n
				    <b><font color='navy'>if</font></b>(bytesCounter==15){\n
			      	sbResult.append(sbHex).append(\"      \").append(sbText).append(\"\\n\");\n
				       	sbHex.setLength(0);\n
			        sbText.setLength(0);\n
			       	bytesCounter=0;\n
			    }<b><font color='navy'>else</font></b>{\n
			        bytesCounter++;\n
			    }\n
		       }\n
		\n
			//if still got content\n
				<b><font color='navy'>if</font></b>(bytesCounter!=0){\n
			     //add spaces more formatting purpose only\n
			    <b><font color='navy'>for</font></b>(;16> bytesCounter; bytesCounter++){\n
				//1 character 3 spaces\n
			sbHex.append(\"   \");\n
			    }\n
		    sbResult.append(sbHex).append(\"      \").append(sbText).append(\"\\n\");\n
    	    }\n
		\n
		        out.print(sbResult);\n
		        is.close();\n
		  }\n
		\n
		   <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException\n
		   {\n
		    	//display output to console\n
		    	convertToHex(System.out, <b><font color='navy'>new</font></b> File(\"c:/file.txt\"));\n
		\n
		    	//write the output into a file\n
    			convertToHex(new PrintStream(\"c:/file.hex\"), <b><font color='navy'>new</font></b> File(\"c:/file.txt\"));\n
   		 }\n
		}\n

		</string>

	<string name="GetTotalOfFreeDiskSpace">
	In Java old days, it lacks of method to determine the free disk space on a partition. But this is changed since JDK 1.6 released, a few new methods – getTotalSpace(), getUsableSpace() and getFreeSpace(), are bundled with java.io.File to retrieve the partition or disk space detail.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> DiskSpaceDetail\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
    	File file = <b><font color='navy'>new</font></b> File(\"c:\");\n
    	long totalSpace = file.getTotalSpace(); //total disk space in bytes.\n
    	long usableSpace = file.getUsableSpace(); ///unallocated / free disk space in bytes.\n
    	long freeSpace = file.getFreeSpace(); //unallocated / free disk space in bytes.\n
\n
    	System.out.println(\" === Partition Detail ===\");\n
\n
    	System.out.println(\" === bytes ===\");\n
    	System.out.println(\"Total size : \" + totalSpace + \" bytes\");\n
    	System.out.println(\"Space free : \" + usableSpace + \" bytes\");\n
    	System.out.println(\"Space free : \" + freeSpace + \" bytes\");\n
\n
    	System.out.println(\" === mega bytes ===\");\n
    	System.out.println(\"Total size : \" + totalSpace /1024 /1024 + \" mb\");\n
    	System.out.println(\"Space free : \" + usableSpace /1024 /1024 + \" mb\");\n
    	System.out.println(\"Space free : \" + freeSpace /1024 /1024 + \" mb\");\n
    }\n
}\n
\n
 \n
Output\n\n
Display the disk space detail in c: partition.\n
\n
=== Partition Detail ===\n
\n
 === bytes ===\n
Total size : 52428795904 bytes\n
Space free : 33677811712 bytes\n
Space free : 33677811712 bytes\n
 === mega bytes ===\n
Total size : 49999 mb\n
Space free : 32117 mb\n
Space free : 32117 mb\n
Note\n\n
Both getFreeSpace() and getUsableSpace() methods are return the same total free disk space of a given partition. But the real different is not clear, even in the java doc. Tell me if you know what’s the different in between.\n
			</string>


	<string name="WriteAnObjToFile">
		Java object can write into a file for future access, this is called Serialization. In order to do this, you have to implement the Serializableinterface, and use ObjectOutputStream to write objects into a file.\n
\n
FileOutputStream fout = <b><font color='navy'>new</font></b> FileOutputStream(\"c:\\temp\\address.ser\");\n
ObjectOutputStream oos = <b><font color='navy'>new</font></b> ObjectOutputStream(fout);\n
oos.writeObject(address);\n\n
1. Object\n
Create an “Address” object and implement the Serializable interface. This object is going to write into a file.\n
\n
Address.java\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.Serializable;\n
\n
<b><font color='navy'>public class</font></b> Address implements Serializable {\n
\n
	<b><font color='navy'>private static final</font></b> long serialVersionUID = 1L;\n
\n
	String street;\n
	String country;\n
\n
	public void setStreet(String street) {\n
		this.street = street;\n
	}\n
\n
	public void setCountry(String country) {\n
		this.country = country;\n
	}\n
\n
	public String getStreet() {\n
		return this.street;\n
	}\n
\n
	public String getCountry() {\n
		return this.country;\n
	}\n
\n
	@Override\n
	public String toString() {\n
		return <b><font color='navy'>new</font></b> StringBuffer(\" Street : \")\n
				.append(this.street).append(\" Country : \")\n
				.append(this.country).toString();\n
	}\n
\n
}\n
\n
 \n
2. Write Object to File\n\n
This class will write the \“Address\” object and it’s variable value (\“wall street\”, \“united state\”) into a file named c:\\temp\\address.ser\n
\n
WriteObject.java\n\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.ObjectOutputStream;\n
\n
<b><font color='navy'>public class</font></b> WriteObject {\n
\n
	<b><font color='navy'>public static void</font></b> main(String args[]) {\n
\n
		WriteObject obj = <b><font color='navy'>new</font></b> WriteObject();\n
\n
		Address address = <b><font color='navy'>new</font></b> Address();\n
		address.setStreet(\"wall street\");\n
		address.setCountry(\"united state\");\n
\n
		obj.serializeAddress(address);\n
\n
	}\n
\n
	public void serializeAddress(Address address) {\n
\n
		FileOutputStream fout = <b><font color='navy'>null</font></b>;\n
		ObjectOutputStream oos = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			fout = <b><font color='navy'>new</font></b> FileOutputStream(\"c:\\temp\\address.ser\");\n
			oos = <b><font color='navy'>new</font></b> ObjectOutputStream(fout);\n
			oos.writeObject(address);\n
\n
			System.out.println(\"Done\");\n
\n
		} <b><font color='navy'>catch</font></b> (Exception ex) {\n
\n
			ex.printStackTrace();\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (fout != <b><font color='navy'>null</font></b>) {\n
				<b><font color='navy'>try</font></b> {\n
					fout.close();\n
				} <b><font color='navy'>catch</font></b> (IOException e) {\n
					e.printStackTrace();\n
				}\n
			}\n
\n
			<b><font color='navy'>if</font></b> (oos != <b><font color='navy'>null</font></b>) {\n
				<b><font color='navy'>try</font></b> {\n
					oos.close();\n
				} <b><font color='navy'>catch</font></b> (IOException e) {\n
					e.printStackTrace();\n
				}\n
			}\n
\n
		}\n
	}\n
\n
	public void serializeAddressJDK7(Address address) {\n
\n
		<b><font color='navy'>try</font></b> (ObjectOutputStream oos =\n
				new ObjectOutputStream(new FileOutputStream(\"c:\\temp\\address2.ser\"))) {\n
\n
			oos.writeObject(address);\n
			System.out.println(\"Done\");\n
\n
		} <b><font color='navy'>catch</font></b> (Exception ex) {\n
			ex.printStackTrace();\n
		}\n
\n
	}\n

}\n
\n
		Note\n\n
Please read this article about how to read the saved object from file – Java.\n
		</string>

	<string name="ReadObjFromFile">
In the previous example, you learn about how to write an Object into a file. In this example, you will learn how to read an object from the saved file or how to deserialize the serialized file.\n
\n
The deserialization process is quite similar with the serialization, you need to use ObjectInputStream to read the content of the file and convert it back to a Java object.\n
\n
FileInputStream fin = <b><font color='navy'>new</font></b> FileInputStream(\"c:\\temp\\address.ser\");\n
ObjectInputStream ois = <b><font color='navy'>new</font></b> ObjectInputStream(fin);\n
address = (Address) ois.readObject();\n\n
1. Read Object from File\n\n
This class will read a serialized file c:\\temp\\address.ser (created in this example), and convert it back to a \“Address\” object and print out the saved value.\n
\n
ReadObject.java\n\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.ObjectInputStream;\n
\n
<b><font color='navy'>public class</font></b> ReadObject {\n
\n
	<b><font color='navy'>public static void</font></b> main(String args[]) {\n
\n
		ReadObject obj = <b><font color='navy'>new</font></b> ReadObject();\n
\n
		Address address = obj.deserialzeAddress(\"c:\\temp\\address.ser\");\n
\n
		System.out.println(address);\n
\n
	}\n
\n
	public Address deserialzeAddress(String filename) {\n
\n
		Address address = <b><font color='navy'>null</font></b>;\n
\n
		FileInputStream fin = <b><font color='navy'>null</font></b>;\n
		ObjectInputStream ois = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			fin = <b><font color='navy'>new</font></b> FileInputStream(filename);\n
			ois = <b><font color='navy'>new</font></b> ObjectInputStream(fin);\n
			address = (Address) ois.readObject();\n
\n
		} <b><font color='navy'>catch</font></b> (Exception ex) {\n
			ex.printStackTrace();\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (fin != <b><font color='navy'>null</font></b>) {\n
				<b><font color='navy'>try</font></b> {\n
					fin.close();\n
				} <b><font color='navy'>catch</font></b> (IOException e) {\n
					e.printStackTrace();\n
				}\n
			}\n
\n
			<b><font color='navy'>if</font></b> (ois != <b><font color='navy'>null</font></b>) {\n
				<b><font color='navy'>try</font></b> {\n
					ois.close();\n
				} <b><font color='navy'>catch</font></b> (IOException e) {\n
					e.printStackTrace();\n
				}\n
			}\n
\n
		}\n
\n
		return address;\n
\n
	}\n
\n
	public Address deserialzeAddressJDK7(String filename) {\n
\n
		Address address = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> (ObjectInputStream ois\n
			= <b><font color='navy'>new</font></b> ObjectInputStream(new FileInputStream(filename))) {\n
\n
			address = (Address) ois.readObject();\n
\n
		} <b><font color='navy'>catch</font></b> (Exception ex) {\n
			ex.printStackTrace();\n
		}\n
\n
		return address;\n
\n
	}\n

}\n
Output\n
\n
Street : wall street Country : united state\n
	</string>

	<string name="CompressFilesInZIPFormat">
		Java comes with \“java.util.zip\” library to perform data compression in ZIp format. The overall concept is quite straightforward.\n
\n
Read file with \“FileInputStream\”\n
Add the file name to \“ZipEntry\” and output it to \“ZipOutputStream\“\n
1. Simple ZIP example\n
Read a file \“C:\\\spy.log\” and compress it into a zip file – \“C:\\\MyFile.zip\“.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.zip;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipEntry;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipOutputStream;\n
\n
<b><font color='navy'>public class</font></b> App\n
{
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		FileOutputStream fos = <b><font color='navy'>new</font></b> FileOutputStream(\"C:\\\MyFile.zip\");\n
    		ZipOutputStream zos = <b><font color='navy'>new</font></b> ZipOutputStream(fos);\n
    		ZipEntry ze= <b><font color='navy'>new</font></b> ZipEntry(\"spy.log\");\n
    		zos.putNextEntry(ze);\n
    		FileInputStream in = <b><font color='navy'>new</font></b> FileInputStream(\"C:\\\spy.log\");\n
\n
    		int len;\n
    		while ((len = in.read(buffer)) > 0) {\n
    			zos.write(buffer, 0, len);\n
    		}\n
\n
    		in.close();\n
    		zos.closeEntry();\n
\n
    		//remember close it\n
    		zos.close();\n
\n
    		System.out.println(\"Done\");\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException ex){\n
    	   ex.printStackTrace();\n
    	}\n
    }\n
}\n
\n
 \n
2. Advance ZIP example – Recursively\n\n
Read all files from folder \“C:\\\testzip\” and compress it into a zip file – \“C:\\\MyFile.zip\“. It will recursively zip a directory as well.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.zip;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipEntry;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipOutputStream;\n
\n
<b><font color='navy'>public class</font></b> AppZip\n
{\n
    List  &lt;String> fileList;\n
    <b><font color='navy'>private static final</font></b> String OUTPUT_ZIP_FILE = \"C:\\ MyFile.zip\";\n
    <b><font color='navy'>private static final</font></b> String SOURCE_FOLDER = \"C:\\ testzip\";\n
\n
    AppZip(){\n
	fileList = <b><font color='navy'>new</font></b> ArrayList &lt;String>();\n
    }\n
\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	AppZip appZip = <b><font color='navy'>new</font></b> AppZip();\n
    	appZip.generateFileList(new File(SOURCE_FOLDER));\n
    	appZip.zipIt(OUTPUT_ZIP_FILE);\n
    }\n
\n
    /**\n
     * Zip it\n
     * @param zipFile output ZIP file location\n
     */\n
    public void zipIt(String zipFile){\n
\n
     byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
     <b><font color='navy'>try</font></b>{\n
\n
    	FileOutputStream fos = <b><font color='navy'>new</font></b> FileOutputStream(zipFile);\n
    	ZipOutputStream zos = <b><font color='navy'>new</font></b> ZipOutputStream(fos);\n
\n
    	System.out.println(\"Output to Zip : \" + zipFile);\n
\n
    	<b><font color='navy'>for</font></b>(String file : this.fileList){\n
\n
    		System.out.println(\"File Added : \" + file);\n
    		ZipEntry ze= <b><font color='navy'>new</font></b> ZipEntry(file);\n
        	zos.putNextEntry(ze);\n
\n
        	FileInputStream in =\n\n
                       <b><font color='navy'>new</font></b> FileInputStream(SOURCE_FOLDER + File.separator + file);\n
\n
        	int len;\n
        	while ((len = in.read(buffer)) > 0) {\n
        		zos.write(buffer, 0, len);\n
        	}\n
\n
        	in.close();\n
    	}\n
\n
    	zos.closeEntry();\n
    	//remember close it\n
    	zos.close();\n
\n
    	System.out.println(\"Done\");\n
    }<b><font color='navy'>catch</font></b>(IOException ex){\n
       ex.printStackTrace();\n
    }\n
   }\n
\n
    /**\n
     * Traverse a directory and get all files,\n
     * and add the file into fileList\n
     * @param node file or directory\n
     */\n
    public void generateFileList(File node){\n
\n
    	//add file only\n
	<b><font color='navy'>if</font></b>(node.isFile()){\n
		fileList.add(generateZipEntry(node.getAbsoluteFile().toString()));\n
	}\n
\n
	<b><font color='navy'>if</font></b>(node.isDirectory()){\n
		String[] subNote = node.list();\n
		<b><font color='navy'>for</font></b>(String filename : subNote){\n
			generateFileList(new File(node, filename));\n
		}\n
	}\n
\n
    }\n
\n
    /**\n
     * Format the file path for zip\n
     * @param file file path\n
     * @return Formatted file path\n
     */\n
    private String generateZipEntry(String file){\n
    	return file.substring(SOURCE_FOLDER.length()+1, file.length());\n
    }\n
}\n
Output\n
\n
Output to Zip : C:\\MyFile.zip\\n
File Added : pdf\\Java-Interview.pdf\\n
File Added : spy\\log\\spy.log\n
File Added : utf-encoded.txt\n
File Added : utf.txt\n
Done
	</string>

	<string name="DecompressFilesFromZIPFile">
		In previous article, we show you how to compress files to a zip file format. In this article we will show you how to unzip it.\n
\n
Read ZIP file with \“ZipInputStream\”\n
Get the files to \“ZipEntry” and output it to \“FileOutputStream\“\n
1. Decompress ZIP file example\n\n
In this example, it will read a ZIP file from \“C:\\lMyFile.zip\“, and decompress all zipped files to \“C:\\loutputzip\” folder.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.zip;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.List;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipEntry;\n
<b><font color='navy'>import</font></b> java.util.zip.ZipInputStream;\n
\n
<b><font color='navy'>public class</font></b> UnZip\n
{\n
    List&lt;String> fileList;\n
    <b><font color='navy'>private static final</font></b> String INPUT_ZIP_FILE = \"C:\\lMyFile.zip\";\n
    <b><font color='navy'>private static final</font></b> String OUTPUT_FOLDER = \"C:\\loutputzip\";\n
\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	UnZip unZip = <b><font color='navy'>new</font></b> UnZip();\n
    	unZip.unZipIt(INPUT_ZIP_FILE,OUTPUT_FOLDER);\n
    }\n
\n
    /**\n
     * Unzip it\n
     * @param zipFile input zip file\n
     * @param output zip file output folder\n
     */\n
    public void unZipIt(String zipFile, String outputFolder){\n
\n
     byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
     <b><font color='navy'>try</font></b>{\n
\n
    	//create output directory is not exists\n
    	File folder = <b><font color='navy'>new</font></b> File(OUTPUT_FOLDER);\n
    	<b><font color='navy'>if</font></b>(!folder.exists()){\n
    		folder.mkdir();\n
    	}\n
\n
    	//get the zip file content\n
    	ZipInputStream zis =\n
    		new ZipInputStream(new FileInputStream(zipFile));\n
    	//get the zipped file list entry\n
    	ZipEntry ze = zis.getNextEntry();\n
\n
    	while(ze!=<b><font color='navy'>null</font></b>){\n
\n
    	   String fileName = ze.getName();\n
           File newFile = <b><font color='navy'>new</font></b> File(outputFolder + File.separator + fileName);\n
\n
           System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\n
\n
            //create all non exists folders\n
            //<b><font color='navy'>else</font></b> you will hit FileNotFoundException for compressed folder\n
            <b><font color='navy'>new</font></b> File(newFile.getParent()).mkdirs();\n
\n
            FileOutputStream fos = <b><font color='navy'>new</font></b> FileOutputStream(newFile);\n
\n
            int len;\n
            while ((len = zis.read(buffer)) > 0) {\n
       		fos.write(buffer, 0, len);\n
            }\n
\n
            fos.close();\n
            ze = zis.getNextEntry();\n
    	}\n
\n
        zis.closeEntry();\n
    	zis.close();\n
\n
    	System.out.println(\"Done\");\n
\n
    }<b><font color='navy'>catch</font></b>(IOException ex){\n
       ex.printStackTrace();\n
    }\n
   }\n
}\n\n
Output\n
\n
file unzip : C:\\outputzip\\pdf\\Java-Interview.pdf\n
file unzip : C:\\outputzip\\spy\\log\\spy.log\n
file unzip : C:\\outputzip\\utf-encoded.txt\n
file unzip : C:\\outputzip\\utf.txt\n
Done\n
	</string>

	<string name="CompressFileInGZIPFormat">
		Gzip is a popular tool to compress a file in *nix system. However, Gzip is not a ZIP tool, it only use to compress a file into a \“.gz\” format, not compress several files into a single archive.\n
\n
GZip example\n
In this example, it will compress a file \“/home/ABychek/file1.txt\” into a gzip file – \“/home/ABychek/file1.gz\“.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.gzip;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.zip.GZIPOutputStream;\n
\n
<b><font color='navy'>public class</font></b> GZipFile\n
{\n
    <b><font color='navy'>private static final</font></b> String OUTPUT_GZIP_FILE = \"/home/ABychek/file1.gz\";\n
    <b><font color='navy'>private static final</font></b> String SOURCE_FILE = \"/home/ABychek/file1.txt\";\n
\n
\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	GZipFile gZip = <b><font color='navy'>new</font></b> GZipFile();\n
    	gZip.gzipIt();\n
    }\n
\n
    /**\n
     * GZip it\n
     * @param zipFile output GZip file location\n
     */\n
    public void gzipIt(){\n
\n
     byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
     <b><font color='navy'>try</font></b>{\n
\n
    	GZIPOutputStream gzos =\n
    		new GZIPOutputStream(new FileOutputStream(OUTPUT_GZIP_FILE));\n
\n
        FileInputStream in =\n
            <b><font color='navy'>new</font></b> FileInputStream(SOURCE_FILE);\n
\n
        int len;\n
        while ((len = in.read(buffer)) > 0) {\n
        	gzos.write(buffer, 0, len);\n
        }\n
\n
        in.close();\n
\n
    	gzos.finish();\n
    	gzos.close();\n
\n
    	System.out.println(\"Done\");\n
\n
    }<b><font color='navy'>catch</font></b>(IOException ex){\n
       ex.printStackTrace();\n
    }\n
   }\n

}\n
	</string>


	<string name="DecompressFileFromGZIPFile">
		In previous article, you learn about how to compress a file into a GZip format. In this article, you will learn how to unzip it / decompress the compressed file from a Gzip file.\n
\n
Gzip example\n
In this example, it will decompress the Gzip file \“/home/ABychek/file1.gz\” back to \“/home/ABychek/file1.txt\“.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.gzip;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.zip.GZIPInputStream;\n
\n
<b><font color='navy'>public class</font></b> GZipFile\n
{\n
    <b><font color='navy'>private static final</font></b> String INPUT_GZIP_FILE = \"/home/ABychek/file1.gz\";\n
    <b><font color='navy'>private static final</font></b> String OUTPUT_FILE = \"/home/ABychek/file1.txt\";\n
\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	GZipFile gZip = <b><font color='navy'>new</font></b> GZipFile();\n
    	gZip.gunzipIt();\n
    }\n
\n
    /**\n
     * GunZip it\n
     */\n
    public void gunzipIt(){\n
\n
     byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
     <b><font color='navy'>try</font></b>{\n

    	 GZIPInputStream gzis =\n
    		new GZIPInputStream(new FileInputStream(INPUT_GZIP_FILE));\n
\n
    	 FileOutputStream out =\n
            <b><font color='navy'>new</font></b> FileOutputStream(OUTPUT_FILE);\n
\n
        int len;\n
        while ((len = gzis.read(buffer)) > 0) {\n
        	out.write(buffer, 0, len);\n
        }\n
\n
        gzis.close();\n
    	out.close();\n
\n
    	System.out.println(\"Done\");\n
\n
    }<b><font color='navy'>catch</font></b>(IOException ex){\n
       ex.printStackTrace();\n
    }\n
   }\n
}\n
	</string>

	<string name="CompressSerializedObjectIntoFile">
		In last section, you learn about how to write or serialized an object into a file. In this example , you can do more than just serialized it , you also can compress the serialized object to reduce the file size.\n
\n
The idea is very simple, just using the \“GZIPOutputStream\” for the data compression.\n
\n
FileOutputStream fos = <b><font color='navy'>new</font></b> FileOutputStream(\"c:\\address.gz\");\n
GZIPOutputStream gz = <b><font color='navy'>new</font></b> GZIPOutputStream(fos);\n
ObjectOutputStream oos = <b><font color='navy'>new</font></b> ObjectOutputStream(gz);\n
GZIP Example\n
In this example, you will create an \“Address\” object , compress it and write it into a file \“c:\\address.gz\“.\n
\n
P.S Address object can refer to this article.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.ObjectOutputStream;\n
<b><font color='navy'>import</font></b> java.io.Serializable;\n
<b><font color='navy'>import</font></b> java.util.zip.GZIPOutputStream;\n
\n
<b><font color='navy'>public class</font></b> Serializer implements Serializable{\n
\n
   <b><font color='navy'>public static void</font></b> main (String args[]) {\n
\n
	   Serializer serializer = <b><font color='navy'>new</font></b> Serializer();\n
	   serializer.serializeAddress(\"wall street\", \"united state\");\n
   }\n
\n
   public void serializeAddress(String street, String country){\n
\n
	   Address address = <b><font color='navy'>new</font></b> Address();\n
	   address.setStreet(street);\n
	   address.setCountry(country);\n
\n
	   <b><font color='navy'>try</font></b>{\n
\n
		   FileOutputStream fos = <b><font color='navy'>new</font></b> FileOutputStream(\"c:\\address.gz\");\n
		   GZIPOutputStream gz = <b><font color='navy'>new</font></b> GZIPOutputStream(fos);\n
\n
		   ObjectOutputStream oos = <b><font color='navy'>new</font></b> ObjectOutputStream(gz);\n
\n
		   oos.writeObject(address);\n
		   oos.close();\n
\n
		   System.out.println(\"Done\");\n
\n
	   }<b><font color='navy'>catch</font></b>(Exception ex){\n
		   ex.printStackTrace();\n
	   }\n
   }\n
}\n
	</string>

	<string name="DecompressSerializedObjectFromGzipFile">
		In last section, you learn about how to compress a serialized object into a file, now you learn how to decompress it from a Gzip file.\n
\n
FileInputStream fin = <b><font color='navy'>new</font></b> FileInputStream(\"c:\\address.gz\");\n
GZIPInputStream gis = <b><font color='navy'>new</font></b> GZIPInputStream(fin);\n
ObjectInputStream ois = <b><font color='navy'>new</font></b> ObjectInputStream(gis);\n
address = (Address) ois.readObject();\n
GZIP example\n
In this example, you will decompress a compressed file \“address.gz\“, and print it out the value.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.ObjectInputStream;\n
<b><font color='navy'>import</font></b> java.io.Serializable;\n
<b><font color='navy'>import</font></b> java.util.zip.GZIPInputStream;\n
\n
<b><font color='navy'>public class</font></b> Deserializer implements Serializable{\n
\n
   <b><font color='navy'>public static void</font></b> main (String args[]) {\n
\n
	   Deserializer deserializer = <b><font color='navy'>new</font></b> Deserializer();\n
	   Address address = deserializer.deserialzeAddress();\n
	   System.out.println(address);\n
   }\n
\n
   public Address deserialzeAddress(){\n
\n
	   Address address;\n
\n
	   <b><font color='navy'>try</font></b>{\n
\n
		   FileInputStream fin = <b><font color='navy'>new</font></b> FileInputStream(\"c:\\address.gz\");\n
		   GZIPInputStream gis = <b><font color='navy'>new</font></b> GZIPInputStream(fin);\n
		   ObjectInputStream ois = <b><font color='navy'>new</font></b> ObjectInputStream(gis);\n
		   address = (Address) ois.readObject();\n
		   ois.close();\n
\n
		   return address;\n
\n
	   }<b><font color='navy'>catch</font></b>(Exception ex){\n
		   ex.printStackTrace();\n
		   return <b><font color='navy'>null</font></b>;\n
	   }\n
   }\n
}\n
\n

Output\n\n
Street : wall street Country : united state\n
	</string>

	<string name="CreateTemporaryFile">
Here’s an example to create a temporary file in Java.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> CreateTempFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	   //create a temp file\n
    	   File temp = File.createTempFile(\"temp-file-name\", \".tmp\");\n
\n
    	   System.out.println(\"Temp file : \" + temp.getAbsolutePath());\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    	   e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
Temp file : C:\Users\ABychek\AppData\Local\Temp\temp-file-name623426.tmp\n
	</string>

	<string name="WriteDataToTemporaryFile">
		Here’s an example to write data to temporary file in Java. Actually, there are no different between normal file and temporary file, what apply to normal text file, will apply to temporary file as well.\n
\n
Example\n\n
In this example, it will create a temporary file named \“tempfile.tmp\“, and write the text \“This is the temporary file content\” inside.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedWriter;\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> WriteTempFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	    //create a temp file\n
    	    File temp = File.createTempFile(\"tempfile\", \".tmp\");\n
\n
	    //write it\n
    	    BufferedWriter bw = <b><font color='navy'>new</font></b> BufferedWriter(new FileWriter(temp));\n
    	    bw.write(\"This is the temporary file content\");\n
    	    bw.close();\n
\n
    	    System.out.println(\"Done\");\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    	    e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
	</string>

	<string name="DeleteTemporaryFile">
	Temporary file is used to store the less <b><font color='navy'>import</font></b>ant and temporary data, which should always be deleted when your system is terminated. The best practice is use the File.deleteOnExit() to do it.\n
\n
For example,\n
\n
File temp = File.createTempFile(\"abc\", \".tmp\");\n
temp.deleteOnExit();\n
The above example will create a temporary file named \“abc.tmp\” and delete it when the program is terminated or exited.\n
\n
P.S If you want to delete the temporary file manually, you can still use the File.delete().\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> DeleteTempFileExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    	   //create a temp file\n
    	   File temp = File.createTempFile(\"temptempfilefile\", \".tmp\");\n
\n
    	   //delete temporary file when the program is exited\n
    	   temp.deleteOnExit();\n
\n
           //delete immediate\n
    	   //temp.delete();\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    	   e.printStackTrace();\n
    	}\n
\n
    }\n
}\n

	</string>

	<string name="GetTheTemporaryFilePath">

		Here’s an example to get the temporary file path in Java.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> GetTempFilePathExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	<b><font color='navy'>try</font></b>{\n
\n
    		//create a temp file\n
    		File temp = File.createTempFile(\"temp-file-name\", \".tmp\");\n
\n
    		System.out.println(\"Temp file : \" + temp.getAbsolutePath());\n
\n
		//Get tempropary file path\n
    		String absolutePath = temp.getAbsolutePath();\n
    		String tempFilePath = absolutePath.\n
    		    substring(0,absolutePath.lastIndexOf(File.separator));\n
\n
    		System.out.println(\"Temp file path : \" + tempFilePath);\n
\n
    	}<b><font color='navy'>catch</font></b>(IOException e){\n
\n
    		e.printStackTrace();\n
\n
    	}\n
\n
    }\n
}\n
\n
 \n
Result\n\n
Temp file : C:\Users\ABychek\AppData\Local\Temp\temp-file-name79456440.tmp\n
Temp file path : C:\Users\ABychek\AppData\Local\Temp\n
	</string>


	<string name="CreateDirectory">

		To create a directory in Java, uses the following code:\n
\n
1. Standard Java IO <b><font color='navy'>package</font></b> – java.io.File\n
\n
1.1 Create a single directory.\n
\n
new File(\"C:\\Directory1\").mkdir();\n
1.2 Create a directory named \“Directory2 and all its sub-directories \“Sub2\” and \“Sub-Sub2\” together.\n
\n
new File(\"C:\\Directory2\\Sub2\\Sub-Sub2\").mkdirs()\n
P.S Both method mkdir() and mkdirs() are returning a boolean value to indicate the operation status : true if succeed, false otherwise.\n
\n
2. For JDK 7, try Java NIO <b><font color='navy'>package</font></b> – java.nio.file.Paths and java.nio.file.Files\n
\n
Path path = Paths.get(\"C:\\Directory1\");\n
Files.createDirectories(path);\n
1. Java IO Example\n\n
A classic Java IO directory example, check if directory exists, if no, then create it.\n
\n
CreateDirectoryExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> CreateDirectoryExample {\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        File file = <b><font color='navy'>new</font></b> File(\"C:\\Directory1\");\n
        <b><font color='navy'>if</font></b> (!file.exists()) {\n
            <b><font color='navy'>if</font></b> (file.mkdir()) {\n
                System.out.println(\"Directory is created!\");\n
            } <b><font color='navy'>else</font></b> {\n
                System.out.println(\"Failed to create directory!\");\n
            }\n
        }\n
\n
        File files = <b><font color='navy'>new</font></b> File(\"C:\\Directory2\\Sub2\\Sub-Sub2\");\n
        <b><font color='navy'>if</font></b> (!files.exists()) {\n
            <b><font color='navy'>if</font></b> (files.mkdirs()) {\n
                System.out.println(\"Multiple directories are created!\");\n
            } <b><font color='navy'>else</font></b> {\n
                System.out.println(\"Failed to create multiple directories!\");\n
            }\n
        }\n

    }\n

}\n
\n
\n
2. Java NIO Example\n\n
Java NIO classes are added in JDK 7.\n
\n
CreateDirectoryExample.java\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.nio.file.Files;\n
<b><font color='navy'>import</font></b> java.nio.file.Path;\n
<b><font color='navy'>import</font></b> java.nio.file.Paths;\n
\n
<b><font color='navy'>public class</font></b> CreateDirectoryExample {\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        Path path = Paths.get(\"C:\\Directory2\\Sub2\\Sub-Sub2\");\n
        //if directory exists?\n
        <b><font color='navy'>if</font></b> (!Files.exists(path)) {\n
            <b><font color='navy'>try</font></b> {\n
                Files.createDirectories(path);\n
            } <b><font color='navy'>catch</font></b> (IOException e) {\n
                //fail to create directory\n
                e.printStackTrace();\n
            }\n
        }\n

    }\n
\n
}\n
If a directory is failing to create, IOException will be thrown, for example\n
\n
java.nio.file.AccessDeniedException: /directory-name\n
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:84)\n
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n
	at sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:384)\n
	at java.nio.file.Files.createDirectory(Files.java:674)\n
	at java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)\n
	at java.nio.file.Files.createDirectories(Files.java:767)\n
	</string>

	<string name="DeleteDirectory">
		To delete a directory, you can simply use the File.delete(), but the directory must be empty in order to delete it.\n
\n
Often times, you may require to perform recursive delete in a directory, which means all it’s sub-directories and files should be delete as well, see below example :\n
\n
Directory recursive delete example\n
Delete the directory named \“C:\\ABychek-new\“, and all it’s sub-directories and files as well. The code is self-explanatory and well documented, it should be easy to understand.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>public class</font></b> DeleteDirectoryExample\n
{\n
    <b><font color='navy'>private static final</font></b> String SRC_FOLDER = \"C:\\ABychek-new\";\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
    	File directory = <b><font color='navy'>new</font></b> File(SRC_FOLDER);\n
\n
    	//make sure directory exists\n
    	<b><font color='navy'>if</font></b>(!directory.exists()){\n
\n
           System.out.println(\"Directory does not exist.\");\n
           System.exit(0);\n
\n
        }<b><font color='navy'>else</font></b>{\n
\n
           <b><font color='navy'>try</font></b>{\n
\n
               delete(directory);\n
\n
           }<b><font color='navy'>catch</font></b>(IOException e){\n
               e.printStackTrace();\n
               System.exit(0);\n
           }\n
        }\n
\n
    	System.out.println(\"Done\");\n
    }\n
\n
    <b><font color='navy'>public static void</font></b> delete(File file)\n
    	<b><font color='navy'>throws</font></b> IOException{\n
\n
    	<b><font color='navy'>if</font></b>(file.isDirectory()){\n
\n
    		//directory is empty, then delete it\n
    		<b><font color='navy'>if</font></b>(file.list().length==0){\n
\n
    		   file.delete();\n
    		   System.out.println(\"Directory is deleted : \"\n
                                                 + file.getAbsolutePath());\n
\n
    		}<b><font color='navy'>else</font></b>{\n
\n
    		   //list all the directory contents\n
        	   String files[] = file.list();\n
\n
        	   <b><font color='navy'>for</font></b> (String temp : files) {\n
        	      //construct the file structure\n
        	      File fileDelete = <b><font color='navy'>new</font></b> File(file, temp);\n
\n
        	      //recursive delete\n
        	     delete(fileDelete);\n
        	   }\n

        	   //check the directory again, if empty then delete it\n
        	   <b><font color='navy'>if</font></b>(file.list().length==0){\n
           	     file.delete();\n
        	     System.out.println(\"Directory is deleted : \"\n
                                                  + file.getAbsolutePath());\n
        	   }\n
    		}\n
\n
    	}<b><font color='navy'>else</font></b>{\n
    		//if file, then delete it\n
    		file.delete();\n
    		System.out.println(\"File is deleted : \" + file.getAbsolutePath());\n
    	}\n
    }\n
}\n
\n
 \n
Result\n\n
File is deleted : C:\ABychek-new\404.php\n
File is deleted : C:\ABychek-new\archive.php\n
...\n
Directory is deleted : C:\ABychek-new\includes\n
File is deleted : C:\ABychek-new\index.php\n
File is deleted : C:\ABychek-new\index.php.hacked\n
File is deleted : C:\ABychek-new\js\hoverIntent.js\n
File is deleted : C:\ABychek-new\js\jquery-1.4.2.min.js\n
File is deleted : C:\ABychek-new\js\jquery.bgiframe.min.js\n
Directory is deleted : C:\ABychek-new\js\superfish-1.4.8\css\n
Directory is deleted : C:\ABychek-new\js\superfish-1.4.8\images\n
Directory is deleted : C:\ABychek-new\js\superfish-1.4.8\n
File is deleted : C:\ABychek-new\js\superfish-navbar.css\n
...\n
Directory is deleted : C:\ABychek-new\n
Done\n
	</string>

	<string name="CopyDirectory">
		Here’s an example to copy a directory and all its sub-directories and files to a new destination directory. The code is full of comments and self-explanatory, left me comment if you need more explanation.\n
\n
Example\n\n
Copy folder \“c:\\ABychek\” and its sub-directories and files to another new folder \“c:\\ABychek-new\“.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.OutputStream;\n
\n
<b><font color='navy'>public class</font></b> CopyDirectoryExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
    	File srcFolder = <b><font color='navy'>new</font></b> File(\"c:\\ABychek\");\n
    	File destFolder = <b><font color='navy'>new</font></b> File(\"c:\\ABychek-new\");\n
\n
    	//make sure source exists\n
    	<b><font color='navy'>if</font></b>(!srcFolder.exists()){\n
\n
           System.out.println(\"Directory does not exist.\");\n
           //just exit\n
           System.exit(0);\n
\n
        }<b><font color='navy'>else</font></b>{\n
\n
           <b><font color='navy'>try</font></b>{\n
        	copyFolder(srcFolder,destFolder);\n
           }<b><font color='navy'>catch</font></b>(IOException e){\n
        	e.printStackTrace();\n
        	//error, just exit\n
                System.exit(0);\n
           }\n
        }\n
\n
    	System.out.println(\"Done\");\n
    }\n
\n
    <b><font color='navy'>public static void</font></b> copyFolder(File src, File dest)\n
    	<b><font color='navy'>throws</font></b> IOException{\n
\n
    	<b><font color='navy'>if</font></b>(src.isDirectory()){\n
\n
    		//if directory not exists, create it\n
    		<b><font color='navy'>if</font></b>(!dest.exists()){\n
    		   dest.mkdir();\n
    		   System.out.println(\"Directory copied from \"\n
                              + src + \"  to \" + dest);\n
    		}\n
\n
    		//list all the directory contents\n
    		String files[] = src.list();\n
\n
    		<b><font color='navy'>for</font></b> (String file : files) {\n
    		   //construct the src and dest file structure\n
    		   File srcFile = <b><font color='navy'>new</font></b> File(src, file);\n
    		   File destFile = <b><font color='navy'>new</font></b> File(dest, file);\n
    		   //recursive copy\n
    		   copyFolder(srcFile,destFile);\n
    		}\n
\n
    	}<b><font color='navy'>else</font></b>{\n
    		//if file, then copy it\n
    		//Use bytes stream to support all file types\n
    		InputStream in = <b><font color='navy'>new</font></b> FileInputStream(src);\n
    	        OutputStream out = <b><font color='navy'>new</font></b> FileOutputStream(dest);\n
\n
    	        byte[] buffer = <b><font color='navy'>new</font></b> byte[1024];\n
\n
    	        int length;\n
    	        //copy the file content in bytes\n
    	        while ((length = in.read(buffer)) > 0){\n
    	    	   out.write(buffer, 0, length);\n
    	        }\n
\n
    	        in.close();\n
    	        out.close();\n
    	        System.out.println(\"File copied from \" + src + \" to \" + dest);\n
    	}\n
    }\n
}\n
\n
 \n
Result\n\n
Directory copied from c:\ABychek  to c:\ABychek-new\n
File copied from c:\ABychek\404.php to c:\ABychek-new\404.php\n
File copied from c:\ABychek\footer.php to c:\ABychek-new\footer.php\n
File copied from c:\ABychek\js\superfish.css to c:\ABychek-new\js\superfish.css\n
File copied from c:\ABychek\js\superfish.js to c:\ABychek-new\js\superfish.js\n
File copied from c:\ABychek\js\supersubs.js to c:\ABychek-new\js\supersubs.js\n
Directory copied from c:\ABychek\images  to c:\ABychek-new\images\n
File copied from c:\ABychek\page.php to c:\ABychek-new\page.php\n
Directory copied from c:\ABychek\psd  to c:\ABychek-new\psd\n
...\n
Done\n

	</string>

	<string name="TraverseDirectoryStructure">
		In this example, the program will traverse the given directory and print out all the directories and files absolute path and name one by one.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> DisplayDirectoryAndFile{\n
\n
	<b><font color='navy'>public static void</font></b> main (String args[]) {\n
\n
		displayIt(new File(\"C:\\Downloads\"));\n
	}\n
\n
	<b><font color='navy'>public static void</font></b> displayIt(File node){\n
\n
		System.out.println(node.getAbsoluteFile());\n
\n
		<b><font color='navy'>if</font></b>(node.isDirectory()){\n
			String[] subNote = node.list();\n
			<b><font color='navy'>for</font></b>(String filename : subNote){\n
				displayIt(new File(node, filename));\n
			}\n
		}\n

	}\n
}\n
\n
 \n
Output\n\n
C:\Downloads\n
C:\Downloads\100 Java Tips.pdf\n
C:\Downloads\1590599799.rar\n
C:\Downloads\2009\n
C:\Downloads\573440.flv\n
C:\Downloads\575492.flv\n
C:\Downloads\avira_antivir_personal_en.exe\n
C:\Downloads\backup-ABychek.com-12-24-2009.tar.gz\n
......\n
\n
	</string>

	<string name="CheckIfDirectoryIsEmpty">

		Here’s an example to check if a directory is empty.\n
\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.file;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> CheckEmptyDirectoryExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args)\n
    {\n
\n
	File file = <b><font color='navy'>new</font></b> File(\"C:\\folder\");\n
\n
	<b><font color='navy'>if</font></b>(file.isDirectory()){\n
\n
		<b><font color='navy'>if</font></b>(file.list().length>0){\n
\n
			System.out.println(\"Directory is not empty!\");\n
\n
		}<b><font color='navy'>else</font></b>{\n
\n
			System.out.println(\"Directory is empty!\");\n
\n
		}\n
\n
	}<b><font color='navy'>else</font></b>{\n
\n
		System.out.println(\"This is not a directory\");\n
\n
	}\n
    }\n
}\n
	</string>

	<string name="GetTheCurrentWorkingDirectory">

		The current working directory means the root folder of your current Java project, it can be retrieved by using the following system property function.\n
\n
String workingDir = System.getProperty(\"user.dir\");\n
Example\n\n
<b><font color='navy'>package</font></b> com.ABychek.io;\n
\n
<b><font color='navy'>public class</font></b> App{\n
\n
   <b><font color='navy'>public static void</font></b> main (String args[]) {\n

	   String workingDir = System.getProperty(\"user.dir\");\n
	   System.out.println(\"Current working directory : \" + workingDir);\n
\n
   }\n
}\n
Output\n
\n
Current working directory : E:\workspace\HibernateExample\n
	</string>

	<string name="GetTheStandartInput">

		Note\n
This post is duplicated, please refer to this – 3 ways to read input from console in Java.\n
A quick example to show you how to read the standard input in Java.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.pageview;\n
\n
<b><font color='navy'>import</font></b> java.io.BufferedReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
\n
<b><font color='navy'>public class</font></b> Test {\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        BufferedReader br = <b><font color='navy'>null</font></b>;\n
\n
        <b><font color='navy'>try</font></b> {\n
\n
            // Refer to this http://www.ABychek.com/java/how-to-read-input-from-console-java/\n
            // for JDK 1.6, please use java.io.Console class to read system input.\n
            br = <b><font color='navy'>new</font></b> BufferedReader(new InputStreamReader(System.in));\n
\n
            while (true) {\n
\n
                System.out.print(\"Enter something : \");\n
                String input = br.readLine();\n
\n
                <b><font color='navy'>if</font></b> (\"q\".equals(input)) {\n
                    System.out.println(\"Exit!\");\n
                    System.exit(0);\n
                }\n
\n
                System.out.println(\"input : \" + input);\n
                System.out.println(\"-----------\");\n
            }\n
\n
        } <b><font color='navy'>catch</font></b> (IOException e) {\n
            e.printStackTrace();\n
        } <b><font color='navy'>finally</font></b> {\n
            <b><font color='navy'>if</font></b> (br != <b><font color='navy'>null</font></b>) {\n
                <b><font color='navy'>try</font></b> {\n
                    br.close();\n
                } <b><font color='navy'>catch</font></b> (IOException e) {\n
                    e.printStackTrace();\n
                }\n
            }\n
        }\n

    }\n

}\n
	</string>


	<string name="ReadXMLFile">
		In this tutorial, we will show you how to read an XML file via DOM XML parser. DOM parser parses the entire XML document and loads it into memory; then models it in a \“TREE\” structure for easy traversal or manipulation.\n
\n
In short, it turns a XML file into DOM or Tree structure, and you have to traverse a node by node to get what you want.\n
\n
What is Node?\n
In the DOM, everything in an XML document is a node, read this.\n
Warning\n
DOM Parser is slow and consumes a lot of memory when it loads an XML document which contains a lot of data. Please consider SAX parser as solution for it, SAX is faster than DOM and use less memory.\n
1. DOM XML Parser Example\n\n
This example shows you how to get the node by \“name\”, and display the value.\n
\n
/Users/ABychek/staff.xml\n
		&lt;?xml version=\"1.0\"?>\n
		&lt;company>\n
	&lt;staff id=\"1001\">\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovi&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;staff id=\"2001\">\n
	&lt;firstname>low&lt;/firstname>\n
	&lt;lastname>yin fong&lt;/lastname>\n
	&lt;nickname>fong fong&lt;/nickname>\n
	&lt;salary>200000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
ReadXMLFile.java\n\n
<b><font color='navy'>package</font></b> com.ABychek.seo;\n
\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilderFactory;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilder;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Document;\n
<b><font color='navy'>import</font></b> org.w3c.dom.NodeList;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Node;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Element;\n
<b><font color='navy'>import</font></b> java.io.File;\n
\n
<b><font color='navy'>public class</font></b> ReadXMLFile {\n
\n
  <b><font color='navy'>public static void</font></b> main(String argv[]) {\n
\n
    <b><font color='navy'>try</font></b> {\n
\n
	File fXmlFile = <b><font color='navy'>new</font></b> File(\"/Users/ABychek/staff.xml\");\n
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n
	Document doc = dBuilder.parse(fXmlFile);\n
\n
	//optional, but recommended\n
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work\n
	doc.getDocumentElement().normalize();\n
\n
	System.out.println(\"Root element :\" + doc.getDocumentElement().getNodeName());\n
\n
	NodeList nList = doc.getElementsByTagName(\"staff\");\n
\n
	System.out.println(\"----------------------------\");\n
\n
	<b><font color='navy'>for</font></b> (int temp = 0; temp &lt; nList.getLength(); temp++) {\n
\n
		Node nNode = nList.item(temp);\n
\n
		System.out.println(\"\nCurrent Element :\" + nNode.getNodeName());\n
\n
		<b><font color='navy'>if</font></b> (nNode.getNodeType() == Node.ELEMENT_NODE) {\n
\n
			Element eElement = (Element) nNode;\n
\n
			System.out.println(\"Staff id : \" + eElement.getAttribute(\"id\"));\n
			System.out.println(\"First Name : \" + eElement.getElementsByTagName(\"firstname\").item(0).getTextContent());\n
			System.out.println(\"Last Name : \" + eElement.getElementsByTagName(\"lastname\").item(0).getTextContent());\n
			System.out.println(\"Nick Name : \" + eElement.getElementsByTagName(\"nickname\").item(0).getTextContent());\n
			System.out.println(\"Salary : \" + eElement.getElementsByTagName(\"salary\").item(0).getTextContent());\n
\n
		}\n
	}\n
    } <b><font color='navy'>catch</font></b> (Exception e) {\n
	e.printStackTrace();\n
    }\n
  }\n

}\n
Result\n
\n
Root element :company\n
----------------------------\n
\n
Current Element :staff\n
Staff id : 1001\n
First Name : Bychek\n
Last Name : Anton Olegovich\n
Nick Name : ABychek\n
Salary : 100000\n
\n
Current Element :staff\n
Staff id : 2001\n
First Name : low\n
Last Name : yin fong\n
Nick Name : fong fong\n
Salary : 200000\n
	</string>

	<string name="ModifyExistingXMLFile">
	In this example, we demonstrate the use of DOM parser to modify an existing XML file :\n
\n
Add a new element\n
Update existing element attribute\n
Update existing element value\n
Delete existing element\n\n
1. XML file\n
See before and after XML file.\n
\n
File : file.xml – Original XML file.\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n
&lt;company>\n
   &lt;staff id=\"1\">\n
	&lt;irstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
   &lt;/staff>\n
&lt;/company>\n
Later, update above XML file via DOM XML Parser.\n
\n
Update the staff attribute id = 2\n
Update salary value to 200000\n
Append a new \“age\” element under staff\n
Delete \“firstname\” element under staff\n
File : file.xml – Newly modified XML file.\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n
&lt;company>\n
   &lt;staff id=\"2\">\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>2000000&lt;/salary>\n
	&lt;age>28&lt;/age>\n
	&lt;/staff>\n
	&lt;company>\n
\n
\n
2. DOM Parser\n
DOM XML parser to update an above XML file.\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilder;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilderFactory;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.ParserConfigurationException;\n
<b><font color='navy'>import</font></b> javax.xml.transform.Transformer;\n
<b><font color='navy'>import</font></b> javax.xml.transform.TransformerException;\n
<b><font color='navy'>import</font></b> javax.xml.transform.TransformerFactory;\n
<b><font color='navy'>import</font></b> javax.xml.transform.dom.DOMSource;\n
<b><font color='navy'>import</font></b> javax.xml.transform.stream.StreamResult;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Document;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Element;\n
<b><font color='navy'>import</font></b> org.w3c.dom.NamedNodeMap;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Node;\n
<b><font color='navy'>import</font></b> org.w3c.dom.NodeList;\n
<b><font color='navy'>import</font></b> org.xml.sax.SAXException;\n
\n
<b><font color='navy'>public class</font></b> ModifyXMLFile {\n
\n
	<b><font color='navy'>public static void</font></b> main(String argv[]) {\n
\n
	   <b><font color='navy'>try</font></b> {\n
		String filepath = \"c:\\file.xml\";\n
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n
		Document doc = docBuilder.parse(filepath);\n
\n
		// Get the root element\n
		Node company = doc.getFirstChild();\n
\n
		// Get the staff element , it may not working if tag has spaces, or\n
		// whatever weird characters in front...it\'s better to use\n
		// getElementsByTagName() to get it directly.\n
		// Node staff = company.getFirstChild();\n
\n
		// Get the staff element by tag name directly\n
		Node staff = doc.getElementsByTagName(\"staff\").item(0);\n
\n
		// update staff attribute\n
		NamedNodeMap attr = staff.getAttributes();\n
		Node nodeAttr = attr.getNamedItem(\"id\");\n
		nodeAttr.setTextContent(\"2\");\n
\n
		// append a new node to staff\n
		Element age = doc.createElement(\"age\");\n
		age.appendChild(doc.createTextNode(\"28\"));\n
		staff.appendChild(age);\n
\n
		// loop the staff child node\n
		NodeList list = staff.getChildNodes();\n
\n
		<b><font color='navy'>for</font></b> (int i = 0; i &lt; list.getLength(); i++) {\n
\n
                   Node node = list.item(i);\n
\n
		   // get the salary element, and update the value\n
		   <b><font color='navy'>if</font></b> ("salary".equals(node.getNodeName())) {\n
			node.setTextContent(\"2000000\");\n
		   }\n
\n
                   //remove firstname\n
		   <b><font color='navy'>if</font></b> (\"firstname\".equals(node.getNodeName())) {\n
			staff.removeChild(node);\n
		   }\n

		}\n
\n
		// write the content into xml file\n
		TransformerFactory transformerFactory = TransformerFactory.newInstance();\n
		Transformer transformer = transformerFactory.newTransformer();\n
		DOMSource source = <b><font color='navy'>new</font></b> DOMSource(doc);\n
		StreamResult result = <b><font color='navy'>new</font></b> StreamResult(new File(filepath));\n
		transformer.transform(source, result);\n
\n
		System.out.println(\"Done\");\n
\n
	   } <b><font color='navy'>catch</font></b> (ParserConfigurationException pce) {\n
		pce.printStackTrace();\n
	   } <b><font color='navy'>catch</font></b> (TransformerException tfe) {\n
		tfe.printStackTrace();\n
	   } <b><font color='navy'>catch</font></b> (IOException ioe) {\n
		ioe.printStackTrace();\n
	   } <b><font color='navy'>catch</font></b> (SAXException sae) {\n
		sae.printStackTrace();\n
	   }\n
	}\n
}\n

	</string>


	<string name="CreateNewXMLFile">

		DOM provides many handy classes to create XML file easily. Firstly, you have to create a Document with DocumentBuilder class, define all the XML content – node, attribute with Element class. In last, use Transformer class to output the entire XML content to stream output, typically a File.\n
\n
In this tutorial, we show you how to use DOM XML parser to create a XML file.\n
\n
DOM Parser Example\n\n
At the end of the example, following XML file named \“file.xml\” will be created.\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n
&lt;company>\n
	&lt;staff id=\"1\">\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
File : WriteXMLFile.java – Java class to create a XML file.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilder;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilderFactory;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.ParserConfigurationException;\n
<b><font color='navy'>import</font></b> javax.xml.transform.Transformer;\n
<b><font color='navy'>import</font></b> javax.xml.transform.TransformerException;\n
<b><font color='navy'>import</font></b> javax.xml.transform.TransformerFactory;\n
<b><font color='navy'>import</font></b> javax.xml.transform.dom.DOMSource;\n
<b><font color='navy'>import</font></b> javax.xml.transform.stream.StreamResult;\n
\n
<b><font color='navy'>import</font></b> org.w3c.dom.Attr;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Document;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Element;\n
\n
<b><font color='navy'>public class</font></b> WriteXMLFile {\n
\n
	<b><font color='navy'>public static void</font></b> main(String argv[]) {\n
\n
	  <b><font color='navy'>try</font></b> {\n
\n
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n
\n
		// root elements\n
		Document doc = docBuilder.newDocument();\n
		Element rootElement = doc.createElement(\"company\");\n
		doc.appendChild(rootElement);\n
\n
		// staff elements\n
		Element staff = doc.createElement(\"Staff\");\n
		rootElement.appendChild(staff);\n
\n
		// set attribute to staff element\n
		Attr attr = doc.createAttribute(\"id\");\n
		attr.setValue(\"1\");\n
		staff.setAttributeNode(attr);\n
\n
		// shorten way\n
		// staff.setAttribute(\"id\", \"1\");\n
\n
		// firstname elements\n
		Element firstname = doc.createElement(\"firstname\");\n
		firstname.appendChild(doc.createTextNode(\"Bychek\"));\n
		staff.appendChild(firstname);\n
\n
		// lastname elements\n
		Element lastname = doc.createElement(\"lastname\");\n
		lastname.appendChild(doc.createTextNode(\"Anton Olegovich\"));\n
		staff.appendChild(lastname);\n
\n
		// nickname elements\n
		Element nickname = doc.createElement(\"nickname\");\n
		nickname.appendChild(doc.createTextNode(\"ABychek\"));\n
		staff.appendChild(nickname);\n
\n
		// salary elements\n
		Element salary = doc.createElement(\"salary\");\n
		salary.appendChild(doc.createTextNode(\"100000\"));\n
		staff.appendChild(salary);\n
\n
		// write the content into xml file\n
		TransformerFactory transformerFactory = TransformerFactory.newInstance();\n
		Transformer transformer = transformerFactory.newTransformer();\n
		DOMSource source = <b><font color='navy'>new</font></b> DOMSource(doc);\n
		StreamResult result = <b><font color='navy'>new</font></b> StreamResult(new File(\"C:\\file.xml\"));\n
\n
		// Output to console for testing\n
		// StreamResult result = <b><font color='navy'>new</font></b> StreamResult(System.out);\n
\n
		transformer.transform(source, result);\n
\n
		System.out.println(\"File saved!\");\n
\n
	  } <b><font color='navy'>catch</font></b> (ParserConfigurationException pce) {\n
		pce.printStackTrace();\n
	  } <b><font color='navy'>catch</font></b> (TransformerException tfe) {\n
		tfe.printStackTrace();\n
	  }\n
	}\n
}\n
A new XML file is created in \“C:\\file.xml\“, with default UTF-8 encoded.\n
\n
Note\n
For debugging, you can change the StreamResult to output the XML content to your console.
StreamResult result =  <b><font color='navy'>new</font></b> StreamResult(System.out);\n
transformer.transform(source, result);\n
	</string>


	<string name="CountXMLElements">

		In this example, we show you how to use DOM Parser to count the total number of elements in a XML file. First, search the element name, and then you can use NodeList.getLength() to get the total number of available elements.\n
\n
NodeList list = doc.getElementsByTagName(\"staff\");\n
System.out.println(\"Total of elements : \" + list.getLength());\n
File : file.xml\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
&lt;company>\n
	&lt;staff id=\"1\">\n
		&lt;firstname>Bychek&lt;/firstname>\n
		&lt;lastname>Anton Olegovich&lt;/lastname>\n
		&lt;nickname>ABychek&lt;/nickname>\n
		&lt;alary>2000000&lt;/salary>\n
		&lt;age>29/age>\n
	&lt;/staff>\n
	&lt;staff id=\"2\">\n
		&lt;firstname>low&lt;/firstname>\n
		&lt;lastname>yin fong&lt;/lastname>\n
		&lt;nickname>fong fong&lt;/nickname>\n
		&lt;salary>1000000/salary>\n
	&lt;/staff>\n
	&lt;staff id=\"3\">\n
		&lt;firstname>Ali&lt;/firstname>\n
		&lt;lastname>Baba&lt;/lastname>\n
		&lt;nickname>Alibaba&lt;/nickname>\n
		&lt;salary>199000&lt;/salary>\n
		&lt;age>40&lt;/age>\n
	&lt;/staff>\n
&lt;/company>\n
File : CountXMLElement.java – Search total number of available \“staff\” elements.\n
\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilder;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.DocumentBuilderFactory;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.ParserConfigurationException;\n
<b><font color='navy'>import</font></b> org.w3c.dom.Document;\n
<b><font color='navy'>import</font></b> org.w3c.dom.NodeList;\n
<b><font color='navy'>import</font></b> org.xml.sax.SAXException;\n
\n
<b><font color='navy'>public class</font></b> CountXMLElement {\n
\n
  <b><font color='navy'>public static void</font></b> main(String argv[]) {\n
\n
	<b><font color='navy'>try</font></b> {\n
		String filepath = \"c:\\file.xml\";\n
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n
		Document doc = docBuilder.parse(filepath);\n
\n
		NodeList list = doc.getElementsByTagName(\"staff\");\n
\n
		System.out.println(\"Total of elements : \" + list.getLength());\n
\n
	} <b><font color='navy'>catch</font></b> (ParserConfigurationException pce) {\n
		pce.printStackTrace();\n
	} <b><font color='navy'>catch</font></b> (IOException ioe) {\n
		ioe.printStackTrace();\n
	} <b><font color='navy'>catch</font></b> (SAXException sae) {\n
		sae.printStackTrace();\n
	}\n
  }\n
}\n
Output\n
\n
Total of elements : 3\n
	</string>

	<string name="ReadXMLFileSAX">

		SAX parser is working differently with a DOM parser, it neither load any XML document into memory nor create any object representation of the XML document. Instead, the SAX parser use callback function (org.xml.sax.helpers.DefaultHandler) to informs clients of the XML document structure.\n
\n
SAX Parser is faster and uses less memory than DOM parser.\n
See following SAX callback methods :\n
\n
startDocument() and endDocument() – Method called at the start and end of an XML document.\n
startElement() and endElement() – Method called at the start and end of a document element.\n
characters() – Method called with the text contents in between the start and end tags of an XML document element.\n\n
1. XML file\n
Create a simple XML file.\n
\n
		&lt;?xml version=\"1.0\"?>\n
&lt;company>\n
	&lt;staff>\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;staff>\n
		&lt;firstname>low&lt;/firstname>\n
		&lt;lastname>yin fong&lt;/lastname>\n
		&lt;nickname>fong fong&lt;/nickname>\n
		&lt;salary>200000&lt;/salary>\n
	&lt;/staff>\n
&lt;/company>\n
\n
 \n
2. Java file\n
Use SAX parser to parse the XML file.\n
\n
<b><font color='navy'>import</font></b> javax.xml.parsers.SAXParser;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.SAXParserFactory;\n
<b><font color='navy'>import</font></b> org.xml.sax.Attributes;\n
<b><font color='navy'>import</font></b> org.xml.sax.SAXException;\n
<b><font color='navy'>import</font></b> org.xml.sax.helpers.DefaultHandler;\n
\n
<b><font color='navy'>public class</font></b> ReadXMLFile {\n
\n
   <b><font color='navy'>public static void</font></b> main(String argv[]) {\n
\n
    <b><font color='navy'>try</font></b> {\n
\n
	SAXParserFactory factory = SAXParserFactory.newInstance();\n
	SAXParser saxParser = factory.newSAXParser();\n
\n
	DefaultHandler handler = <b><font color='navy'>new</font></b> DefaultHandler() {\n
\n
	boolean bfname = false;\n
	boolean blname = false;\n
	boolean bnname = false;\n
	boolean bsalary = false;\n
\n
	public void startElement(String uri, String localName,String qName,\n
                Attributes attributes) <b><font color='navy'>throws</font></b> SAXException {\n
\n
		System.out.println(\"Start Element :\" + qName);\n
\n
		<b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"FIRSTNAME\")) {\n
			bfname = true;\n
		}\n
\n
		<b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"LASTNAME\")) {\n
			blname = true;\n
		}\n
\n
		<b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"NICKNAME\")) {\n
			bnname = true;\n
		}\n
\n
		<b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"SALARY\")) {\n
			bsalary = true;\n
		}\n
\n
	}\n
\n
	public void endElement(String uri, String localName,\n
		String qName) <b><font color='navy'>throws</font></b> SAXException {\n
\n
		System.out.println(\"End Element :\" + qName);\n
\n
	}\n
\n
	public void characters(char ch[], int start, int length) <b><font color='navy'>throws</font></b> SAXException {\n
\n
		<b><font color='navy'>if</font></b> (bfname) {\n
			System.out.println(\"First Name : \" + <b><font color='navy'>new</font></b> String(ch, start, length));\n
			bfname = false;\n
		}\n

		<b><font color='navy'>if</font></b> (blname) {\n
			System.out.println(\"Last Name : \" + <b><font color='navy'>new</font></b> String(ch, start, length));\n
			blname = false;\n
		}\n
\n
		<b><font color='navy'>if</font></b> (bnname) {\n
			System.out.println(\"Nick Name : \" + <b><font color='navy'>new</font></b> String(ch, start, length));\n
			bnname = false;\n
		}\n
\n
		<b><font color='navy'>if</font></b> (bsalary) {\n
			System.out.println(\"Salary : \" + <b><font color='navy'>new</font></b> String(ch, start, length));\n
			bsalary = false;\n
		}\n

	}\n

     };\n\n

       saxParser.parse(\"c:\\file.xml\", handler);\n
\n
     } <b><font color='navy'>catch</font></b> (Exception e) {\n
       e.printStackTrace();\n
     }\n

   }\n

}\n
Result\n
\n
Start Element :company\n
Start Element :staff\n
Start Element :firstname\n
First Name : Bychek\n
End Element :firstname\n
Start Element :lastname\n
Last Name : Anton Olegovich\n
End Element :lastname\n
Start Element :nickname\n
Nick Name : ABychek\n
End Element :nickname\n
Start Element :salary\n
Salary : 100000\n
End Element :salary\n
End Element :staff\n
Start Element :staff\n
Start Element :firstname\n
First Name : low\n
End Element :firstname\n
Start Element :lastname\n
Last Name : yin fong\n
End Element :lastname\n
Start Element :nickname\n
Nick Name : fong fong\n
End Element :nickname\n
Start Element :salary\n
Salary : 200000\n
End Element :salary\n
End Element :staff\n
End Element :company\n\n
Warning\n
This example may encounter exceptions for UTF-8 XML file, please read this article about how to read the XML \“UTF-8\” file in SAX\n\n
Note\n
You may interest to read this How to read XML file in Java – (DOM Parser)\n
	</string>

	<string name="ReadUTF8XMLFile">

		By ABychek | December 17, 2009 | Updated : August 4, 2011 | Viewed : 156,285 times +429 pv/w

In previous Java SAX XML example, there is no problem if you use SAX to parse a plain text (ANSI) XML file, however, if you parse a XML file which contains some special UTF-8 characters, it will prompts \“Invalid byte 1 of 1-byte UTF-8 sequence\” exception.\n
\n
com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException:\n
Invalid byte 1 of 1-byte UTF-8 sequence.\n
See following xml file which contain a special UTF-8 characters \“§\” (press Alt + 789)\n
\n
		&lt;?xml version=\"1.0\"?>\n
&lt;company>\n
	&lt;staff>\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>§&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
To fix it, just override the SAX input source like this :\n
\n
File file = <b><font color='navy'>new</font></b> File(\"c:\\file-utf.xml\");\n
InputStream inputStream= <b><font color='navy'>new</font></b> FileInputStream(file);\n
Reader reader = <b><font color='navy'>new</font></b> InputStreamReader(inputStream,\"UTF-8\");\n
\n
InputSource is = <b><font color='navy'>new</font></b> InputSource(reader);\n
is.setEncoding(\"UTF-8\");\n
\n
saxParser.parse(is, handler);\n
See a full example of using SAX parser to parse a Unicode XML file.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.test;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.io.InputStreamReader;\n
<b><font color='navy'>import</font></b> java.io.Reader;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.SAXParser;\n
<b><font color='navy'>import</font></b> javax.xml.parsers.SAXParserFactory;\n
<b><font color='navy'>import</font></b> org.xml.sax.Attributes;\n
<b><font color='navy'>import</font></b> org.xml.sax.InputSource;\n
<b><font color='navy'>import</font></b> org.xml.sax.SAXException;\n
<b><font color='navy'>import</font></b> org.xml.sax.helpers.DefaultHandler;\n
\n
<b><font color='navy'>public class</font></b> ReadXMLUTF8FileSAX\n
{\n
    <b><font color='navy'>public static void</font></b> main( String[] args )\n
    {\n
    	<b><font color='navy'>try</font></b> {\n
\n
    	      SAXParserFactory factory = SAXParserFactory.newInstance();\n
    	      SAXParser saxParser = factory.newSAXParser();\n
\n
    	      DefaultHandler handler = <b><font color='navy'>new</font></b> DefaultHandler() {\n
\n
    	        boolean bfname = false;\n
    	        boolean blname = false;\n
    	        boolean bnname = false;\n
    	        boolean bsalary = false;\n
\n
    	        public void startElement(String uri, String localName,\n
    	            String qName, Attributes attributes)\n
    	            <b><font color='navy'>throws</font></b> SAXException {\n
\n
    	          System.out.println(\"Start Element :\" + qName);\n
\n
    	          <b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"FIRSTNAME\")) {\n
    	        	  bfname = true;\n
    	          }\n
\n
    	          <b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"LASTNAME\")) {\n
    	        	  blname = true;\n
    	          }\n
\n
    	          <b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"NICKNAME\")) {\n
    	        	  bnname = true;\n
    	          }\n
\n
    	          <b><font color='navy'>if</font></b> (qName.equalsIgnoreCase(\"SALARY\")) {\n
    	        	  bsalary = true;\n
    	          }\n
\n
    	        }\n
\n
    	        public void endElement(String uri, String localName,\n
    	                String qName)\n
    	                <b><font color='navy'>throws</font></b> SAXException {\n
\n
    	              System.out.println(\"End Element :\" + qName);\n
\n
    	        }\n
\n
    	        public void characters(char ch[], int start, int length)\n
    	            <b><font color='navy'>throws</font></b> SAXException {\n
\n
    	          System.out.println(new String(ch, start, length));\n
\n
\n
    	          <b><font color='navy'>if</font></b> (bfname) {\n
    	            System.out.println(\"First Name : \"\n
    	                + <b><font color='navy'>new</font></b> String(ch, start, length));\n
    	            bfname = false;\n
    	          }\n
\n
    	          <b><font color='navy'>if</font></b> (blname) {\n
    	              System.out.println(\"Last Name : \"\n
    	                  + <b><font color='navy'>new</font></b> String(ch, start, length));\n
    	              blname = false;\n
    	           }\n
\n
    	          <b><font color='navy'>if</font></b> (bnname) {\n
    	              System.out.println(\"Nick Name : \"\n
    	                  + <b><font color='navy'>new</font></b> String(ch, start, length));\n
    	              bnname = false;\n
    	           }\n
\n
    	          <b><font color='navy'>if</font></b> (bsalary) {\n
    	              System.out.println(\"Salary : \"\n
    	                  + <b><font color='navy'>new</font></b> String(ch, start, length));\n
    	              bsalary = false;\n
    	           }\n

    	        }\n

    	      };\n
\n
    	      File file = <b><font color='navy'>new</font></b> File(\"c:\\file.xml\");\n
    	      InputStream inputStream= <b><font color='navy'>new</font></b> FileInputStream(file);\n
    	      Reader reader = <b><font color='navy'>new</font></b> InputStreamReader(inputStream,\"UTF-8\");\n
\n
    	      InputSource is = <b><font color='navy'>new</font></b> InputSource(reader);\n
    	      is.setEncoding(\"UTF-8\");\n
\n
    	      saxParser.parse(is, handler);\n
\n
\n
    	    } <b><font color='navy'>catch</font></b> (Exception e) {\n
    	      e.printStackTrace();\n
    	    }\n

    }\n
}\n
	</string>

	<string name="SAXErrorInvalidByte1">

		Problem
When some special UTF-8 characters inside a XML file, and your SAX’s parser is not configure to parse the UTF-8 properly, the following exception will be thrown.\n
\n
com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException:\n
Invalid byte 1 of 1-byte UTF-8 sequence.\n
...\n
\n
 \n
Solution\n
The solution is quite simple, get the content in UTF-8 format, and override the SAX input source.\n
\n
File file = <b><font color='navy'>new</font></b> File(\"c:\\file-utf.xml\");\n
InputStream inputStream= <b><font color='navy'>new</font></b> FileInputStream(file);\n
Reader reader = <b><font color='navy'>new</font></b> InputStreamReader(inputStream,\"UTF-8\");\n
\n
InputSource is = <b><font color='navy'>new</font></b> InputSource(reader);\n
is.setEncoding(\"UTF-8\");\n
\n
saxParser.parse(is, handler);\n
You can read the full example here – how do read UTF-8 XML file with SAX parser\n
	</string>

	<string name="SAXErrorContentIsNotAllowed">

		Problem\n\n
Working XML via SAX parser, but when it parse some XML file, it prompts following error message :\n
\n
org.xml.sax.SAXParseException: Content is not allowed in prolog.\n
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)\n
	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)\n
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\n
	//...\n
\n

Solution\n
This error message is always caused by the invalid XML content in the beginning element. For example, extra small dot \“.\” in the beginning of XML element.\n
\n
Any characters before the \“&lt;?xml….\” will cause above “org.xml.sax.SAXParseException: Content is not allowed in prolog” error message.\n
\n
A small dot \“.\” before the \“&lt;?xml….\n
\n
.&lt;?xml version="1.0"?>\n
&lt;company>\n
	&lt;staff>\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;staff>\n
	&lt;firstname>low&lt;/firstname>\n
	&lt;lastname>yin fong&lt;/lastname>\n
	&lt;nickname>fong fong&lt;/nickname>\n
	&lt;salary>200000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
To fix it, just delete all those weird characters before the \“&lt;?xml\“.\n


	</string>

	<string name="ReadXMLFileJDOM">

		JDOM is, quite simply, a Java representation of an XML document. JDOM provides a way to represent that document for easy and efficient reading, manipulation, and writing. It has a straightforward API, is a lightweight and fast, and is optimized for the Java programmer. It’s an alternative to DOM and SAX, although it integrates well with both DOM and SAX.\n
JDOM, Java XML parser, is more user friendly in the way of accessing the XML document.\n
\n
In this example, we show you how to use JDOM to read a XML file, and print out each element orderly.\n
\n
1. Download the JDOM library\n
JDOM is not like SAX or DOM, which bundled in JDK. To use JDOM, you need to download the library manually.\n
\n
Get JDOM from JDOM official site or declares following dependency if you are using Maven.\n
\n
&lt;dependency>\n
&lt;groupId>jdom&lt;/groupId>\n
	&lt;artifactId>jdom&lt;/artifactId>\n
	&lt;version>1.1&lt;/version>\n
    &lt;/dependency>\n
\n
\n
2. XML File\n\n
XML file as following\n
\n
		&lt;?xml version=\"1.0\"?>\n
&lt;company>\n
	&lt;staff>\n
		&lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>100000&lt;/salary>\n
	&lt;/staff>\n
	&lt;staff>\n
		&lt;firstname>low&lt;/firstname>\n
	&lt;lastname>yin fong&lt;/lastname>\n
	&lt;nickname>fong fong&lt;/nickname>\n
	&lt;salary>200000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
\n
\n
3. Java File\n\n
Use JDOM parser to parse above XML file.\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.List;\n
<b><font color='navy'>import</font></b> org.jdom.Document;\n
<b><font color='navy'>import</font></b> org.jdom.Element;\n
<b><font color='navy'>import</font></b> org.jdom.JDOMException;\n
<b><font color='navy'>import</font></b> org.jdom.input.SAXBuilder;\n
\n
<b><font color='navy'>public class</font></b> ReadXMLFile {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	  SAXBuilder builder = <b><font color='navy'>new</font></b> SAXBuilder();\n
	  File xmlFile = <b><font color='navy'>new</font></b> File(\"c:\\file.xml\");\n
\n
	  <b><font color='navy'>try</font></b> {\n
\n
		Document document = (Document) builder.build(xmlFile);\n
		Element rootNode = document.getRootElement();\n
		List list = rootNode.getChildren(\"staff\");\n
\n
		<b><font color='navy'>for</font></b> (int i = 0; i &lt; list.size(); i++) {\n
\n
		   Element node = (Element) list.get(i);\n
\n
		   System.out.println(\"First Name : \" + node.getChildText(\"firstname\"));\n
		   System.out.println(\"Last Name : \" + node.getChildText(\"lastname\"));\n
		   System.out.println(\"Nick Name : \" + node.getChildText(\"nickname\"));\n
		   System.out.println(\"Salary : \" + node.getChildText(\"salary\"));\n
\n
		}\n
\n
	  } <b><font color='navy'>catch</font></b> (IOException io) {\n
		System.out.println(io.getMessage());\n
	  } <b><font color='navy'>catch</font></b> (JDOMException jdomex) {\n
		System.out.println(jdomex.getMessage());\n
	  }\n
	}\n
}\n\n
Output\n
\n
First Name : Bychek\n
Last Name : Anton Olegovich\n
Nick Name : ABychek\n
Salary : 100000\n
First Name : low\n
Last Name : yin fong\n
Nick Name : fong fong\n
Salary : 200000\n
Note\n
You may also at the following two examples :\n
How to read XML file in Java – (SAX Parser)\n
How to read XML file in Java – (DOM Parser)\n
	</string>

	<string name="ModifyExistingXMLFileJDOM">

		JDOM XML parser example to modify an existing XML file :\n
\n
Add a new element\n
Update existing element attribute\n
Update existing element value\n
Delete existing element\n\n
1. XML File\n
See before and after XML file.\n
\n
File : file.xml – Original XML file.\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
		&lt;company>\n
  &lt;staff id=\"1\">\n
    &lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>5000&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
Later, update above XML file via JDOM XML Parser.\n
\n
Add a new \“age\” element under staff\n
Update the staff attribute id = 2\n
Update salary value to 7000\n
Delete \“firstname\” element under staff\n
File : file.xml – Newly modified XML file.\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
		&lt;company>\n
  &lt;staff id=\"2\">\n
    &lt;lastname>Anton Olegovich&lt;/lastname>\n
    &lt;nickname>ABychek&lt;/nickname>\n
    &lt;salary>7000&lt;&lt;/salary>\n
    &lt;age>28&lt;/age>\n
  &lt;/staff>\n
&lt;/company>\n
\n
 \n
2. JDOM Example\n\n
JDOM parser to update or modify an existing XML file.\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> org.jdom.Document;\n
<b><font color='navy'>import</font></b> org.jdom.Element;\n
<b><font color='navy'>import</font></b> org.jdom.JDOMException;\n
<b><font color='navy'>import</font></b> org.jdom.input.SAXBuilder;\n
<b><font color='navy'>import</font></b> org.jdom.output.Format;\n
<b><font color='navy'>import</font></b> org.jdom.output.XMLOutputter;\n
\n
<b><font color='navy'>public class</font></b> ModifyXMLFile {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	  <b><font color='navy'>try</font></b> {\n
\n
		SAXBuilder builder = <b><font color='navy'>new</font></b> SAXBuilder();\n
		File xmlFile = <b><font color='navy'>new</font></b> File(\"c:\\file.xml\");\n
\n
		Document doc = (Document) builder.build(xmlFile);\n
		Element rootNode = doc.getRootElement();\n
\n
		// update staff id attribute\n
		Element staff = rootNode.getChild(\"staff\");\n
		staff.getAttribute(\"id\").setValue(\"2\");\n
\n
		// add <b><font color='navy'>new</font></b> age element\n
		Element age = <b><font color='navy'>new</font></b> Element(\"age\").setText(\"28\");\n
		staff.addContent(age);\n
\n
		// update salary value\n
		staff.getChild(\"salary\").setText(\"7000\");\n
\n
		// remove firstname element\n
		staff.removeChild(\"firstname\");\n
\n
		XMLOutputter xmlOutput = <b><font color='navy'>new</font></b> XMLOutputter();\n
\n
		// display nice nice\n
		xmlOutput.setFormat(Format.getPrettyFormat());\n
		xmlOutput.output(doc, <b><font color='navy'>new</font></b> FileWriter(\"c:\\file.xml\"));\n
\n
		// xmlOutput.output(doc, System.out);\n
\n
		System.out.println(\"File updated!\");\n
	  } <b><font color='navy'>catch</font></b> (IOException io) {\n
		io.printStackTrace();\n
	  } <b><font color='navy'>catch</font></b> (JDOMException e) {\n
		e.printStackTrace();\n
	  }\n
	}\n
}\n
	</string>

	<string name="CreateNewXMLFileJDOM">

		In this example, we show you how to use JDOM parser to create document, element and attribute in a XML file.\n
\n
1. XML File\n
At the end of this example, following XML file will be created.\n
\n
File : file.xml\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
&lt;company>\n
  &lt;staff id=\"1\">\n
    &lt;firstname>Bychek&lt;/firstname>\n
	&lt;lastname>Anton Olegovich&lt;/lastname>\n
	&lt;nickname>ABychek&lt;/nickname>\n
	&lt;salary>199999&lt;/salary>\n
	&lt;/staff>\n
	&lt;staff id=\"2\">\n
	&lt;firstname>low&lt;/firstname>\n
	&lt;lastname>yin fong&lt;/lastname>\n
	&lt;nickname>fong fong&lt;/nickname>\n
	&lt;salary>188888&lt;/salary>\n
	&lt;/staff>\n
	&lt;/company>\n
\n

3. JDOM Example\n
JDOM example to create above XML file.\n
\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> org.jdom.Attribute;\n
<b><font color='navy'>import</font></b> org.jdom.Document;\n
<b><font color='navy'>import</font></b> org.jdom.Element;\n
<b><font color='navy'>import</font></b> org.jdom.output.Format;\n
<b><font color='navy'>import</font></b> org.jdom.output.XMLOutputter;\n
\n
<b><font color='navy'>public class</font></b> WriteXMLFile {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	  <b><font color='navy'>try</font></b> {\n
\n
		Element company = <b><font color='navy'>new</font></b> Element(\"company\");\n
		Document doc = <b><font color='navy'>new</font></b> Document(company);\n
		doc.setRootElement(company);\n
\n
		Element staff = <b><font color='navy'>new</font></b> Element(\"staff\");\n
		staff.setAttribute(new Attribute(\"id\", \"1\"));\n
		staff.addContent(new Element(\"firstname\").setText(\"Bychek\"));\n
		staff.addContent(new Element(\"lastname\").setText(\"Anton Olegovich\"));\n
		staff.addContent(new Element(\"nickname\").setText(\"ABychek\"));\n
		staff.addContent(new Element(\"salary\").setText(\"199999\"));\n
\n
		doc.getRootElement().addContent(staff);\n
\n
		Element staff2 = <b><font color='navy'>new</font></b> Element(\"staff\");\n
		staff2.setAttribute(new Attribute(\"id\", \"2\"));\n
		staff2.addContent(new Element(\"firstname\").setText(\"low\"));\n
		staff2.addContent(new Element(\"lastname\").setText(\"yin fong\"));\n
		staff2.addContent(new Element(\"nickname\").setText(\"fong fong\"));\n
		staff2.addContent(new Element(\"salary\").setText(\"188888\"));\n
\n
		doc.getRootElement().addContent(staff2);\n
\n
		// new XMLOutputter().output(doc, System.out);\n
		XMLOutputter xmlOutput = <b><font color='navy'>new</font></b> XMLOutputter();\n
\n
		// display nice nice\n
		xmlOutput.setFormat(Format.getPrettyFormat());\n
		xmlOutput.output(doc, <b><font color='navy'>new</font></b> FileWriter(\"c:\\file.xml\"));\n
\n
		System.out.println(\"File Saved!\");\n
	  } <b><font color='navy'>catch</font></b> (IOException io) {\n
		System.out.println(io.getMessage());\n
	  }\n
	}\n
}\n
	</string>

	<string name="JAXB2Example">
		JAXB, stands for Java Architecture for XML Binding, using JAXB annotation to convert Java object to / from XML file. In this tutorial, we show you how to use JAXB to do following stuffs :\n
\n
Marshalling – Convert a Java object into a XML file.\n
Unmarshalling – Convert XML content into a Java Object.\n
Technologies used in this article\n
\n
JDK 1.6\n
JAXB 2.0\n
Working with JAXB is easy, just annotate object with JAXB annotation, later use jaxbMarshaller.marshal() or jaxbMarshaller.unmarshal() to do the object / XML conversion.\n
\n
1. JAXB Dependency\n\n
No extra jaxb libraries are required if you are using JDK1.6 or above, because JAXB is bundled in JDK 1.6.\n
\n
Note\n
For JDK &lt; 1.6, download JAXB from here, and puts \“jaxb-api.jar\” and \“jaxb-impl.jar\” on your project classpath.\n
\n
 \n
2. JAXB Annotation\n\n
For object that need to convert to / from XML file, it have to annotate with JAXB annotation. The annotation are pretty self-explanatory, you can refer to this JAXB guide for detail explanation.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> javax.xml.bind.annotation.XmlAttribute;\n
<b><font color='navy'>import</font></b> javax.xml.bind.annotation.XmlElement;\n
<b><font color='navy'>import</font></b> javax.xml.bind.annotation.XmlRootElement;\n
\n
@XmlRootElement\n
<b><font color='navy'>public class</font></b> Customer {\n
\n\n
	String name;\n
	int age;\n
	int id;\n
\n
	public String getName() {\n
		return name;\n
	}\n
\n
	@XmlElement\n
	public void setName(String name) {\n
		this.name = name;\n
	}\n
\n
	public int getAge() {\n
		return age;\n
	}\n
\n
	@XmlElement\n
	public void setAge(int age) {\n
		this.age = age;\n
	}\n
\n
	public int getId() {\n
		return id;\n
	}\n
\n
	@XmlAttribute\n
	public void setId(int id) {\n
		this.id = id;\n
	}\n

}\n
\n
 \n
3. Convert Object to XML\n
JAXB marshalling example, convert customer object into a XML file. The jaxbMarshaller.marshal() contains a lot of overloaded methods, find one that suit your output.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> javax.xml.bind.JAXBContext;\n
<b><font color='navy'>import</font></b> javax.xml.bind.JAXBException;\n
<b><font color='navy'>import</font></b> javax.xml.bind.Marshaller;\n
\n
<b><font color='navy'>public class</font></b> JAXBExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	  Customer customer = <b><font color='navy'>new</font></b> Customer();\n
	  customer.setId(100);\n
	  customer.setName(\"ABychek\");\n
	  customer.setAge(29);\n
\n
	  <b><font color='navy'>try</font></b> {\n
\n
		File file = <b><font color='navy'>new</font></b> File(\"C:\\file.xml\");\n
		JAXBContext jaxbContext = JAXBContext.newInstance(Customer.class);\n
		Marshaller jaxbMarshaller = jaxbContext.createMarshaller();\n
\n
		// output pretty printed\n
		jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n
\n
		jaxbMarshaller.marshal(customer, file);\n
		jaxbMarshaller.marshal(customer, System.out);\n
\n
	      } <b><font color='navy'>catch</font></b> (JAXBException e) {\n
		e.printStackTrace();\n
	      }\n

	}\n
}\n
Output\n\n

		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n
&lt;customer id=\"100\">\n
    &lt;age>29&lt;/age>\n
    &lt;name>ABychek&lt;/name>\n
&lt;/customer>\n\n
4. Convert XML to Object\n
JAXB unmarshalling example, convert a XML file content into a customer object. The jaxbMarshaller.unmarshal() contains a lot of overloaded methods, find one that suit yours.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> java.io.File;
<b><font color='navy'>import</font></b> javax.xml.bind.JAXBContext;\n
<b><font color='navy'>import</font></b> javax.xml.bind.JAXBException;\n
<b><font color='navy'>import</font></b> javax.xml.bind.Unmarshaller;\n
\n
<b><font color='navy'>public class</font></b> JAXBExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	 <b><font color='navy'>try</font></b> {\n
\n
		File file = <b><font color='navy'>new</font></b> File(\"C:\\file.xml\");\n
		JAXBContext jaxbContext = JAXBContext.newInstance(Customer.class);\n
\n
		Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n
		Customer customer = (Customer) jaxbUnmarshaller.unmarshal(file);\n
		System.out.println(customer);\n
\n
	  } <b><font color='navy'>catch</font></b> (JAXBException e) {\n
		e.printStackTrace();\n
	  }\n

	}\n
}\n
Output\n
\n
Customer [name=ABychek, age=29, id=100]\n
	</string>

	<string name="ConvertPropertiesFileIntoXMLFile">

		Many developers may not aware of this function, actually, the java.util.Properties class come with a storeToXML() method to convert existing properties data into a XML file.\n

Note\n\n
Please refer to this Properties JavaDoc for detail explanation.\n
<b><font color='navy'>import</font></b> java.io.FileOutputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.OutputStream;\n
<b><font color='navy'>import</font></b> java.util.Properties;\n
\n
<b><font color='navy'>public class</font></b> PropertiesXMLExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException\n
    {\n
    	Properties props = <b><font color='navy'>new</font></b> Properties();\n
    	props.setProperty(\"email.support\", \"donot-spam-me@nospam.com");\n
\n
    	//where to store?\n
    	OutputStream os = <b><font color='navy'>new</font></b> FileOutputStream(\"c:/email-configuration.xml\");\n
\n
    	//store the properties detail into a pre-defined XML file\n
    	props.storeToXML(os, \"Support Email\",\"UTF-8\");\n
\n
    	System.out.println(\"Done\");\n
    }\n
}\n
The above example will write the properties detail into a XML file \“c:/email-configuration.xml\“.\n
\n
		&lt;xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
		&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">\n
	&lt;properties>\n
		&lt;comment>Support Email&lt;/comment>\n
	&lt;entry key="email.support">donot-spam-me@nospam.com&lt;/entry>\n
	&lt;/properties>\n

	</string>




	<string name="ConvertXMLFileIntoPropertiesFile">

		In last article, we show you how to convert properties file into XML file. See following XML file :\n
\n
		&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
		&lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n
  &lt;properties>\n
	&lt;comment>Support Email&lt;/comment>\n
	&lt;entry key="email.support">donot-spam-me@nospam.com&lt;/entry>\n
   &lt;/properties>\n
In this example, we show you how to use loadFromXML() method to load above XML file into a properties object, and get the key \“email.support\” value via getProperty() method.\n
\n
<b><font color='navy'>package</font></b> com.ABychek;\n
\n
<b><font color='navy'>import</font></b> java.io.FileInputStream;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.InputStream;\n
<b><font color='navy'>import</font></b> java.util.Properties;\n
\n
<b><font color='navy'>public class</font></b> PropertiesXMLExample\n
{\n
    <b><font color='navy'>public static void</font></b> main(String[] args) <b><font color='navy'>throws</font></b> IOException\n
    {\n
    	Properties props = <b><font color='navy'>new</font></b> Properties();\n
\n
    	InputStream is = <b><font color='navy'>new</font></b> FileInputStream(\"c:/email-configuration.xml\");\n
    	//load the xml file into properties format\n
    	props.loadFromXML(is);\n
\n
    	String email = props.getProperty(\"email.support\");\n
\n
    	System.out.println(email);\n
\n
    }\n
}\n
Output\n\n
The above example will print out the value of properties key : \“email.support\” :\n
\n
donot-spam-me@nospam.com\n

	</string>

	<string name="ObjectAndJSON">

		1. Quick Reference\n\n
1.1 Convert Java object to JSON, writeValue(...)\n
\n
ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
User user = <b><font color='navy'>new</font></b> User();\n
\n
//Object to JSON in file\n
mapper.writeValue(new File(\"c:\\user.json\"), user);\n
\n
//Object to JSON in String\n
String jsonInString = mapper.writeValueAsString(user);\n
1.2 Convert JSON to Java object, readValue(...)\n
\n
ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
String jsonInString = \"{\'name\' : \'ABychek\'}\";\n

//JSON from file to Object
User user = mapper.readValue(new File(\"c:\\user.json\"), User.class);
\n
//JSON from String to Object\n
User user = mapper.readValue(jsonInString, User.class);\n
P.S All examples are tested with Jackson 1.9.13\n
\n

\n
2. Jackson Dependency\n
For Jackson 1.x, it contains 6 separate jars for different purpose, in most cases, you just need jackson-mapper-asl.\n
\n
pom.xml\n
&lt;dependency>\n
	&lt;groupId>org.codehaus.jackson&lt;/groupId>\n
	&lt;artifactId>jackson-mapper-asl&lt;/artifactId>\n
	&lt;version>1.9.13&lt;/version>\n
	&lt;/dependency>\n

\n
3. POJO (Plain Old Java Object)\n
An User object for testing.\n
\n
User.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>public class</font></b> User {\n
\n
	private String name;\n
	private int age;\n
	private List&lt;String> messages;\n
\n
	//getters and setters\n
}\n
4. Java Object to JSON\n\n
Convert an user object into a JSON formatted string.\n
\n
JacksonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerationException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.JsonMappingException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> JacksonExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
		//For testing\n
		User user = createDummyUser();\n
\n
		<b><font color='navy'>try</font></b> {\n
			//Convert object to JSON string and save into file directly\n
			mapper.writeValue(new File(\"D:\\user.json\"), user);\n
\n
			//Convert object to JSON string\n
			String jsonInString = mapper.writeValueAsString(user);\n
			System.out.println(jsonInString);\n
\n
			//Convert object to JSON string and pretty print\n
			jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(user);\n
			System.out.println(jsonInString);\n

\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n

	}\n
\n
	private static User createDummyUser(){\n
\n
		User user = <b><font color='navy'>new</font></b> User();\n
\n
		user.setName(\"ABychek\");\n
		user.setAge(33);\n
\n
		List&lt;String> msg = <b><font color='navy'>new</font></b> ArrayList&lt;>();\n
		msg.add(\"hello jackson 1\");\n
		msg.add(\"hello jackson 2\");\n
		msg.add(\"hello jackson 3\");\n
\n
		user.setMessages(msg);\n
\n
		return user;\n
\n
	}\n
}\n
Output\n
\n
//new json file is created in D:\\user.json\"\n
\n
{\"name\":\"ABychek\",\"age\":33,\"messages\":[\"hello jackson 1\",\"hello jackson 2\",\"hello jackson 3\"]}\n
\n
{\n
  \"name\" : \"ABychek\",\n
  \"age\" : 33,\n
  \"messages\" : [ \"hello jackson 1\", \"hello jackson 2\", \"hello jackson 3\" ]\n
}\n
5. JSON to Java Object\n\n
Read JSON string and convert it back to a Java object.\n
\n
JacksonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerationException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.JsonMappingException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> JacksonExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			// Convert JSON string from file to Object\n
			User user = mapper.readValue(new File(\"G:\\user.json\"), User.class);\n
			System.out.println(user);\n
\n
			// Convert JSON string to Object\n
			String jsonInString = \"{\"age\":33,\"messages\":[\"msg 1\",\"msg 2\"],\"name\":\"ABychek\"}";\n
			User user1 = mapper.readValue(jsonInString, User.class);\n
			System.out.println(user1);\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
\n
	}\n

}\n
Output\n
\n
User [name=ABychek, age=33, messages=[hello jackson 1, hello jackson 2, hello jackson 3]]\n
\n
User [name=ABychek, age=33, messages=[msg 1, msg 2]]\n
6. @JsonView\n
@JsonView has been supported in Jackson since version 1.4, it lets you control what fields to display.\n
\n
6.1 A simple class.\n
\n
Views.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>public class</font></b> Views {\n
\n
	public static class NameOnly{};\n
	public static class AgeAndName extends NameOnly{};\n
\n
}\n
6.2 Annotate on the fields you want to display.\n
\n
User.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.util.List;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.annotate.JsonView;\n
\n
<b><font color='navy'>public class</font></b> User {\n
\n
	@JsonView(Views.NameOnly.class)\n
	private String name;\n
\n
	@JsonView(Views.AgeAndName.class)\n
	private int age;\n
\n
	private List&lt;String> messages;\n
\n
	//getter and setters\n
}\n
6.3 Enable the @JsonView via writerWithView().\n
\n
JacksonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerationException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.JsonMappingException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.ObjectMapper;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.SerializationConfig;\n
\n
<b><font color='navy'>public class</font></b> JacksonExample {\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
		//By default all fields without explicit view definition are included, disable this\n
		mapper.configure(SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION, false);\n
\n
		//For testing\n
		User user = createDummyUser();\n
\n
		<b><font color='navy'>try</font></b> {\n
			//display name only\n
			String jsonInString = mapper.writerWithView(Views.NameOnly.class).writeValueAsString(user);\n
			System.out.println(jsonInString);\n
\n
			//display namd ana age\n
			jsonInString = mapper.writerWithView(Views.AgeAndName.class).writeValueAsString(user);\n
			System.out.println(jsonInString);\n
\n

		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
\n
	}\n

	private static User createDummyUser(){\n
\n
		User user = <b><font color='navy'>new</font></b> User();\n
\n
		user.setName(\"ABychek\");\n
		user.setAge(33);\n

		List&lt;String> msg = <b><font color='navy'>new</font></b> ArrayList&lt;>();\n\n
		msg.add(\"hello jackson 1\");\n
		msg.add(\"hello jackson 2\");\n
		msg.add(\"hello jackson 3\");\n
\n
		user.setMessages(msg);\n
\n
		return user;\n

	}\n
}\n
Output\n
\n
{\"name\":\"ABychek\"}\n
{\"name\":\"ABychek\",\"age\":33}\n


	</string>

	<string name="MapAndJSON">
In this tutorial, we will show you few Jackson examples to convert JSON string to/from a Map.\n
\n
P.S All examples are tested with Jackson 2.6.3\n
\n
1. JSON string to Map\n
JsonMapExample.java\n\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.HashMap;\n
<b><font color='navy'>import</font></b> java.util.Map;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.type.TypeReference;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> JsonMapExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
			String json = \"{\\"name\\":\\"ABychek\\", \\"age\\":29}\";\n
\n
			Map&lt;String, Object> map = <b><font color='navy'>new</font></b> HashMap&lt;String, Object>();\n
\n
			// convert JSON string to Map\n
			map = mapper.readValue(json, <b><font color='navy'>new</font></b> TypeReference&lt;Map&lt;String, String>>(){});\n
\n
			System.out.println(map);\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n

}\n
Output\n
\n
{name=ABychek, age=29}\n
\n
 \n
2. Map to JSON string\n
Example to convert the Map to JSON string.\n
\n
MapJsonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.HashMap;\n
<b><font color='navy'>import</font></b> java.util.Map;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> MapJsonExample{\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
			String json = \"\";\n
\n
			Map&lt;String, Object> map = <b><font color='navy'>new</font></b> HashMap&lt;String, Object>();\n
			map.put(\"name\", \"ABychek\");\n
			map.put(\"age\", 29);\n
\n
			// convert map to JSON string\n
			json = mapper.writeValueAsString(map);\n
\n
			System.out.println(json);\n

			json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);\n
\n
			// pretty print\n
			System.out.println(json);\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n

}\n
Output\n
\n
{\"name\":\"ABychek\",\"age\":29}\n
{\n
  \"name\" : \"ABychek\",\n
  \"age\" : 29\n
}\n
\n
 \n
3. Map to JSON File\n\n
JsonMapFileExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.HashMap;\n
<b><font color='navy'>import</font></b> java.util.List;\n
<b><font color='navy'>import</font></b> java.util.Map;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> JsonMapFileExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
			Map&lt;String, Object> map = <b><font color='navy'>new</font></b> HashMap&lt;String, Object>();\n
			map.put(\"name\", \"ABychek\");\n
			map.put(\"age\", 29);\n
\n
			List&lt;Object> list = <b><font color='navy'>new</font></b> ArrayList&lt;>();\n
			list.add(\"msg 1\");\n
			list.add(\"msg 2\");\n
			list.add(\"msg 3\");\n
\n
			map.put(\"messages\", list);\n
\n
			// write JSON to a file\n
			mapper.writeValue(new File(\"c:\\user.json\"), map);\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n

}\n
c:\\user.json\n\n
{\"name\":\"ABychek\",\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"],\"age\":29}\n
4. JSON file to Map\n
JsonFileMapExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.Map;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.type.TypeReference;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> Jackson2Example {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
			// read JSON from a file\n
			Map&lt;String, Object> map = mapper.readValue(\n
					new File(\"c:\\user.json\"),\n
					new TypeReference&lt;Map&lt;String, Object>>() {\n
			});\n
\n
			System.out.println(map.get(\"name\"));\n
			System.out.println(map.get(\"age\"));\n
\n
			@SuppressWarnings(\"unchecked\")\n
			ArrayList&lt;String> list = (ArrayList&lt;String>) map.get(\"messages\");\n
\n
			<b><font color='navy'>for</font></b>(String msg : list) {\n
				System.out.println(msg);\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n

}\n
Output\n
\n
ABychek\n
29\n
msg 1\n
msg 2\n
msg 3\n

	</string>


	<string name="JacksonTreeModelExample">
In Jackson, you can use \“Tree Model\” to represent JSON, and perform the read and write operations via JsonNode, it is similar to an XML DOM tree.\n
\n
P.S Tested with Jackson 2.6.3\n
\n
1. TreeModel Traversing Example\n
1.1 JSON file, top level represents an object.\n
\n
c:\\user.json\n
{\n
  \"id\"   : 1,\n
  \"name\" : {\n
    \"first\" : \"Bychek\",\n
    \"last\" : \"Anton Olegovich\"\n
  },\n
  \"contact\" : [\n
    { \"typ\e" : \"phone/home\", \"ref\" : \"111-111-1234\"},\n
    { \"type\" : \"phone/work\", \"ref\" : \"222-222-2222\"}\n
  ]\n
}\n
1.2 Using Jackson TreeModel (JsonNode) to parse and traversal above JSON file. Read comments for self-explanatory.\n
\n
JacksonTreeModel.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonNode;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
\n
<b><font color='navy'>public class</font></b> JacksonTreeModel {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			long id;\n
			String firstName = \"\";\n
			String middleName = \"\";\n
			String lastName = \"\";\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
			JsonNode root = mapper.readTree(new File(\"c:\\user.json\"));\n
\n
			// Get id\n
			id = root.path(\"id\").asLong();\n
			System.out.println(\"id : \" + id);\n
\n
			// Get Name\n
			JsonNode nameNode = root.path(\"name\");\n
			<b><font color='navy'>if</font></b> (nameNode.isMissingNode()) {\n
				// if \"name\" node is missing\n
			} <b><font color='navy'>else</font></b> {\n
\n
				firstName = nameNode.path(\"first\").asText();\n
				// missing node, just return empty string\n
				middleName = nameNode.path(\"middle\").asText();\n
				lastName = nameNode.path(\"last\").asText();\n
\n
				System.out.println(\"firstName : \" + firstName);\n
				System.out.println(\"middleName : \" + middleName);\n
				System.out.println(\"lastName : \" + lastName);\n
\n
			}\n
\n
			// Get Contact\n
			JsonNode contactNode = root.path(\"contact\");\n
			<b><font color='navy'>if</font></b> (contactNode.isArray()) {\n
				// If this node an Arrray?\n
			}\n
\n
			<b><font color='navy'>for</font></b>(JsonNode node : contactNode) {\n
				String type = node.path(\"type\").asText();\n
				String ref = node.path(\"ref\").asText();\n
				System.out.println(\"type : \" + type);\n
				System.out.println(\"ref : \" + ref);\n
\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n
\n
}\n
Output\n
\n
id : 1\n
firstName : Bychek\n
middleName :\n
lastName : Anton Olegovich\n
type : phone/home\n
ref : 111-111-1234\n
type : phone/work\n
ref : 222-222-2222\n
\n
 \n
2. TreeModel Traversing Example – Part 2\n
2.1 JSON file, top level represents an Array.\n
\n
c:\\user2.json\n
[\n
 {\n
  \"id\"   : 1,\n
  \"name\" : {\n
    \"first\" : \"Bychek\",\n
    \"last\" : \"Anton Olegovich\"\n
  },\n
  \"contact\" : [\n
    { \"type\" : \"phone/home\", \"ref\" : \"111-111-1234\"},\n
    { \"type\" : \"phone/work\", \"ref\" : \"222-222-2222\"}\n
  ]\n
},\n
{\n
  \"id\"   : 2,\n
  \"name\" : {\n
    \"first\" : \"Bychek\",\n
    \"last\" : \"Zi Lap\"\n
  },\n
  \"contact\" : [\n
    { \"type\" : \"phone/home\", \"ref\" : \"333-333-1234\"},\n
    { \"type\" : \"phone/work\", \"ref\" : \"444-444-4444\"}\n
  ]\n
}\n
]\n
2.2 The concept is same, just loops the first node.\n
\n
ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
JsonNode rootArray = mapper.readTree(new File(\"c:\\user2.json\"));\n
\n
for(JsonNode root : rootArray){\n
\n
	//refer example 1.2 above, same ways to process nodes\n
\n
}\n
\n
 \n
3. TreeModel CRUD Example\n
3.1 This example, show you how to create, update and remove nodes (ObjectNode and ArrayNode). Read the comments for self-explanatory.\n
\n
JacksonTreeModel.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.core.JsonGenerationException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonMappingException;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.JsonNode;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.ObjectMapper;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.node.ArrayNode;\n
<b><font color='navy'>import</font></b> com.fasterxml.jackson.databind.node.ObjectNode;\n
\n
<b><font color='navy'>public class</font></b> JacksonTreeModel {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
\n
			JsonNode root = mapper.readTree(new File(\"c:\\user.json\"));\n
\n
			String resultOriginal = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);\n
			System.out.println(\"Before Update \" + resultOriginal);\n
\n
			// 1. Update id to 1000\n
			((ObjectNode) root).put(\"id\", 1000L);\n
\n
			// 2. If middle name is empty , update to M\n
			JsonNode nameNode = root.path(\"name\");\n
			<b><font color='navy'>if</font></b> (\"\".equals(nameNode.path(\"middle\").asText())) {\n
				((ObjectNode) nameNode).put(\"middle\", \"M\");\n
			}\n
\n
			// 3. Create a <b><font color='navy'>new</font></b> field in nameNode\n
			((ObjectNode) nameNode).put(\"nickname\", \"ABychek\");\n
\n
			// 4. Remove last field in nameNode\n
			((ObjectNode) nameNode).remove(\"last\");\n
\n
			// 5. Create a <b><font color='navy'>new</font></b> ObjectNode and add to root\n
			ObjectNode positionNode = mapper.createObjectNode();\n
			positionNode.put(\"name\", \"Developer\");\n
			positionNode.put(\"years\", 10);\n
			((ObjectNode) root).set(\"position\", positionNode);\n
\n
			// 6. Create a <b><font color='navy'>new</font></b> ArrayNode and add to root\n
			ArrayNode gamesNode = mapper.createArrayNode();\n
\n
			ObjectNode game1 = mapper.createObjectNode();\n
			game1.put(\"name\", \"Fall Out 4\");\n
			game1.put(\"price\", 49.9);\n
\n
			ObjectNode game2 = mapper.createObjectNode();\n
			game2.put(\"name\", \"Dark Soul 3\");\n
			game2.put(\"price\", 59.9);\n
\n
			gamesNode.add(game1);\n
			gamesNode.add(game2);\n
			((ObjectNode) root).set(\"games\", gamesNode);\n
\n
			// 7. Append a <b><font color='navy'>new</font></b> Node to ArrayNode\n
			ObjectNode email = mapper.createObjectNode();\n
			email.put(\"type\", \"email\");\n
			email.put(\"ref\", \"abc@ABychek.com\");\n
\n
			JsonNode contactNode = root.path(\"contact\");\n
			((ArrayNode) contactNode).add(email);\n
\n
			String resultUpdate = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);\n
			System.out.println(\"After Update \" + resultUpdate);\n
\n
		} <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
			e.printStackTrace();\n
		} <b><font color='navy'>catch</font></b> (IOException e) {\n
			e.printStackTrace();\n
		}\n
	}\n
\n
}\n
Output\n
\n
Before Update {\n
  \"id\" : 1,\n
  \"name\" : {\n
    \"first\" : \"Bychek\",\n
    \"last\" : \"Anton Olegovich\"\n
  },\n
  \"contact\" : [ {\n
    \"type\" : \"phone/home\",\n
    \"ref\" : \"111-111-1234\"\n
  }, {\n
    \"type\" : \"phone/work\",\n
    \"ref\" : \"222-222-2222\"\n
  } ]\n
}\n
\n
After Update {\n
  \"id\" : 1000,\n
  \"name\" : {\n
    \"first\" : \"Bychek\",\n
    \"middle\" : \"M\",\n
    \"nickname\" : \"ABychek"\\n
  },\n
  \"contact\" : [ {\n
    \"type\" : \"phone/home\",\n
    \"ref\" : \"111-111-1234\"\n
  }, {\n
    \"type\" : \"phone/work\",\n
    \"ref\" : \"222-222-2222\"\n
  }, {\n
    \"type\" : \"email\",\n
    \"ref\" : \"abc@ABychek.com\"\n
  } ],\n
  \"position\" : {\n
    \"name\" : \"Developer\",\n
    \"years\" : 10\n
  },\n
  \"games\" : [ {\n
    \"name\" : \"Fall Out 4\",\n
    \"price\" : 49.9\n
  }, {\n
    \"name\" : "\Dark Soul 3\",\n
    \"price\" : 59.9\n
  } ]\n
}\n

	</string>

	<string name="JacksonStreamingExample">

		Jackson supports read and write JSON via high-performance Jackson Streaming APIs, or incremental mode. Read this Jackson Streaming APIs document for detail explanation on the benefit of using streaming API.\n
\n
Jackson\’s streaming processing is high-performance, fast and convenient, but it\’s also difficult to use, because you need to handle each and every detail of JSON data.\n
\n
In this tutorial, we show you how to use following Jackson streaming APIs to read and write JSON data.\n
\n
JsonGenerator – Write to JSON.\n
JsonParser – Parse JSON.\n
1. JsonGenerator\n
In this example, you use \“JsonGenerator\” to write JSON \“field name\”, \“values\” and \“array of values\” into a file name \“file.json\“. See code comments for self-explanatory.\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonEncoding;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonFactory;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerationException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerator;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.JsonMappingException;\n
\n
<b><font color='navy'>public class</font></b> JacksonStreamExample {\n
   <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
     <b><font color='navy'>try</font></b> {\n
\n
	JsonFactory jfactory = <b><font color='navy'>new</font></b> JsonFactory();\n
\n
	/*** write to file ***/\n
	JsonGenerator jGenerator = jfactory.createJsonGenerator(new File(\n
			\"c:\\user.json\"), JsonEncoding.UTF8);\n
	jGenerator.writeStartObject(); // {\n
\n
	jGenerator.writeStringField(\"name\", \"ABychek\"); // \"name\" : \"ABychek\"\n
	jGenerator.writeNumberField(\"age\", 29); // \"age\" : 29\n
\n
	jGenerator.writeFieldName(\"messages\"); // \"messages\" :\n
	jGenerator.writeStartArray(); // [\n
\n
	jGenerator.writeString(\"msg 1\"); // \"msg 1\"\n
	jGenerator.writeString(\"msg 2\"); // \"msg 2\"\n
	jGenerator.writeString(\"msg 3\"); // \"msg 3\"\n
\n
	jGenerator.writeEndArray(); // ]\n
\n
	jGenerator.writeEndObject(); // }\n
\n
	jGenerator.close();\n
\n
     } <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
\n
	e.printStackTrace();\n
\n
     } <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
\n
	e.printStackTrace();\n
\n
     } <b><font color='navy'>catch</font></b> (IOException e) {\n
\n
	e.printStackTrace();\n
\n
     }\n

   }\n

}\n
As result, following new file named \“file.json\” is created :\n
\n
{\n
	\"name\":\"ABychek\",\n
	\"age\":29,\n
	\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"]\n
}\n
\n
 \n
2. JsonParser\n
On the other hand, use JsonParser to parse or read above file \“file.json\“, and display each of the values.\n
\n
Token concept\n
In streaming mode, every JSON \“string\” is consider as a single token, and each tokens will be processed incremental, that why we call it \“incremental mode\”. For example,\n
{\n
   \"name\":\"ABychek\"\n
}\n
Token 1 = \“{\“\n
Token 2 = \“name\”\n
Token 3 = \“ABychek\”\n
Token 4 = \“}\”\n
See full example.\n
\n
<b><font color='navy'>import</font></b> java.io.File;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonFactory;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonGenerationException;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonParser;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.JsonToken;\n
<b><font color='navy'>import</font></b> org.codehaus.jackson.map.JsonMappingException;\n
\n
<b><font color='navy'>public class</font></b> JacksonStreamExample {\n
   <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
     <b><font color='navy'>try</font></b> {\n
\n
	JsonFactory jfactory = <b><font color='navy'>new</font></b> JsonFactory();\n
\n
	/*** read from file ***/\n
	JsonParser jParser = jfactory.createJsonParser(new File(\"c:\\user.json\"));\n
\n
	// loop until token equal to \"}\"\n
	while (jParser.nextToken() != JsonToken.END_OBJECT) {\n
\n
		String fieldname = jParser.getCurrentName();\n
		<b><font color='navy'>if</font></b> (\"name\".equals(fieldname)) {\n
\n
		  // current token is \"name\",\n
                  // move to next, which is \"name\"\'s value\n
		  jParser.nextToken();\n
		  System.out.println(jParser.getText()); // display ABychek\n
\n
		}\n

		<b><font color='navy'>if</font></b> (\"age\".equals(fieldname)) {\n
\n
		  // current token is \"age\",\n
                  // move to next, which is \"name\"\'s value\n
		  jParser.nextToken();\n
		  System.out.println(jParser.getIntValue()); // display 29\n
\n
		}\n
\n
		<b><font color='navy'>if</font></b> (\"messages\".equals(fieldname)) {\n
\n
		  jParser.nextToken(); // current token is \"[\", move next\n
\n
		  // messages is array, loop until token equal to \"]\"\n
		  while (jParser.nextToken() != JsonToken.END_ARRAY) {\n
\n
                     // display msg1, msg2, msg3\n
		     System.out.println(jParser.getText());\n
\n
		  }\n

		}\n

	  }\n
	  jParser.close();\n
\n
     } <b><font color='navy'>catch</font></b> (JsonGenerationException e) {\n
\n
	  e.printStackTrace();\n
\n
     } <b><font color='navy'>catch</font></b> (JsonMappingException e) {\n
\n
	  e.printStackTrace();\n
\n
     } <b><font color='navy'>catch</font></b> (IOException e) {\n
\n
	  e.printStackTrace();\n

     }\n

  }\n

}\n
Warning\n
The array parsing is a bit tricky, read code comments for explanation.\n\n
Output\n
\n
ABychek\n
29\n
msg 1\n
msg 2\n
msg 3\n
	</string>

	<string name="PrettyPrintJSONOutputInJackso">

		In this tutorial, we will show you how to use Jackson library to pretty print JSON Object and String in the console and JSP page.\n
\n
1. Pretty Print JSON Object\n\n
Example to convert Object and print its output in JSON format.\n
\n
User user = <b><font color='navy'>new</font></b> User();\n
//…set user data\n

ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
System.out.println(mapper.writeValueAsString(user));\n
But the json output is in compact mode.\n
\n
{\"age\":29,\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"],\"name\":\"ABychek\"}\n
To enable pretty print, use writerWithDefaultPrettyPrinter.\n
\n
ObjectMapper mapper = <b><font color='navy'>new</font></b> ObjectMapper();\n
System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(user));\n\n
Output\n

{\n
  \"age\" : 29,\n
  \"messages\" : [ \"msg 1\", \"msg 2\", \"msg 3\" ],\n
  \"name\" : \"ABychek\"\n
}\n
\n
 \n
2. Pretty Print JSON String\n
This is a bit tricky, try to use writerWithDefaultPrettyPrinter again.\n
\n
String test = \"{\\"age\\":29,\\"messages\\":[\\"msg 1\\",\\"msg 2\\",\\"msg 3\\"],\\"name\\":\\"ABychek\\"}";\n
System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(test));\n
Output, not what we want, json is still in compact mode.\n
\n
\"{\\"age\\":29,\\"messages\\":[\\"msg 1\\",\\"msg 2\\",\\"msg 3\\"],\\"name\\":\\"ABychek\\"}"\n
To solve it, bind the JSON string to Object before pretty print it.\n
\n
String test = "{\\"age\\":29,\\"messages\\":[\\"msg 1\\",\\"msg 2\\",\\"msg 3\\"],\\"name\\":\\"ABychek\\"}";\n
Object json = mapper.readValue(test, Object.class);\n
System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));\n\n
Output\n
\n
{\n
  \"age\" : 29,\n
  \"messages\" : [ \"msg 1\", \"msg 2\", \"msg 3\" ],\n
  \"name\" : \"ABychek\"\n
}\n
\n
 \n
3. Pretty Print JSON in JSP page\n
To pretty print JSON data in a JSP page or any other HTML page, just wrap the json data with &lt;pre> tag. This example is using Spring MVC and JSP page.\n
\n
Controller Class\n
@Controller\n
@RequestMapping(\"/anything\")\n
<b><font color='navy'>public class</font></b> AdminController {\n
\n
  @RequestMapping(method = RequestMethod.GET)\n
  public ModelAndView index() {\n

	String test = \"{\\"age\\":29,\\"messages\\":[\\"msg 1\\",\\"msg 2\\",\\"msg 3\\"],\\"name\\":\\"ABychek\\"}";\n
	Object json = mapper.readValue(test, Object.class);\n

	ModelAndView modelandView = <b><font color='navy'>new</font></b> ModelAndView(\"viewname\");\n

	modelandView.addObject(\"output\", mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));\n

	return modelandViewl;\n

  }\n

}
In html page.\n
&lt;pre>${output}&lt;/pre>\n


	</string>

		<string name="ObjAndGson">

			In this tutorial, we will show you how to use Gson to convert Java object to / from JSON.\n
\n
P.S All examples are tested with Gson 2.6.2\n
\n
Note\n
JSON stands for JavaScript Object Notation, it is a lightweight data-interchange format. You can see many Java applications started to throw away XML format and start using JSON as a new data-interchange format. Java is all about object, often times, you need to convert an object into JSON format for data-interchange or vice verse.\n
Note\n
Jackson is another high performance JSON processor, try this Jackson 2 – Java object to / from JSON\n
1. Quick Reference\n
1.1 toJson() – Convert Java object to JSON\n
\n
Gson gson = <b><font color='navy'>new</font></b> Gson();\n
Staff obj = <b><font color='navy'>new</font></b> Staff();\n
\n
// 1. Java object to JSON, and save into a file\n
gson.toJson(obj, <b><font color='navy'>new</font></b> FileWriter(\"D:\\file.json\"));\n
\n
// 2. Java object to JSON, and assign to a String\n
String jsonInString = gson.toJson(obj);\n
1.2 fromJson() – Convert JSON to Java object\n
\n
Gson gson = <b><font color='navy'>new</font></b> Gson();\n
\n
// 1. JSON to Java object, read it from a file.\n
Staff staff = gson.fromJson(new FileReader(\"D:\\file.json\"), Staff.class);\n
\n
// 2. JSON to Java object, read it from a Json String.\n
String jsonInString = \"{\'name\' : \'ABychek\'}\";\n
Staff staff = gson.fromJson(jsonInString, Staff.class);\n
\n
// JSON to JsonElement, convert to String later.\n
JsonElement json = gson.fromJson(new FileReader(\"D:\\file.json\"), JsonElement.class);\n
    String result = gson.toJson(json);\n
\n
 \n
2. Gson Dependency\n
To use Gson, declares the following dependency.\n
\n
pom.xml\n
&lt;dependency>\n
    	&lt;groupId>com.google.code.gson&lt;/groupId>\n
	&lt;artifactId>gson&lt;/artifactId>\n
	&lt;version>2.6.2&lt;/version>\n
	&lt;/dependency>\n
\n

3. POJO\n\n
A simple POJO, for testing later.\n
\n
staff.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> java.math.BigDecimal;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>public class</font></b> Staff {\n
\n
	private String name;\n
	private int age;\n
	private String position;\n
	private BigDecimal salary;\n
	private List&lt;String> skills;\n
\n
	//...\n
4. Java Object to JSON\n
Gson example to convert a Staff object into a JSON formatted string.\n
\n
GsonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> com.google.gson.Gson;\n
\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.math.BigDecimal;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>public class</font></b> GsonExample {\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        Staff staff = createDummyObject();\n
\n
        //1. Convert object to JSON string\n
        Gson gson = <b><font color='navy'>new</font></b> Gson();\n
        String json = gson.toJson(staff);\n
        System.out.println(json);\n
\n
        //2. Convert object to JSON string and save into a file directly\n
        <b><font color='navy'>try</font></b> (FileWriter writer = <b><font color='navy'>new</font></b> FileWriter(\"D:\\staff.json\")) {\n
\n
            gson.toJson(staff, writer);\n
\n
        } <b><font color='navy'>catch</font></b> (IOException e) {\n
            e.printStackTrace();\n
        }\n
\n
    }\n
\n
    private static Staff createDummyObject() {\n
\n
        Staff staff = <b><font color='navy'>new</font></b> Staff();\n
\n
        staff.setName(\"ABychek\");\n
        staff.setAge(35);\n
        staff.setPosition(\"Founder\");\n
        staff.setSalary(new BigDecimal(\"10000\"));\n
\n
        List&lt;String> skills = <b><font color='navy'>new</font></b> ArrayList&lt;>();\n
        skills.add(\"java\");\n
        skills.add(\"python\");\n
        skills.add(\"shell\");\n
\n
        staff.setSkills(skills);\n
\n
        return staff;\n

    }\n

}\n
Output\n

{\"name\":\"ABychek\",\"age\":35,\"position\":\"Founder\",\"salary\":10000,\"skills\":[\"java\",\"python\",\"shell\"]}\n
\n
//new file is created in \"D:\\staff.json\"\n
5. JSON to Java Object\n
Gson example to read a JSON from a file and convert it back to a Java object.\n
\n
Gson2Example.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> com.google.gson.Gson;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.io.Reader;\n
\n
<b><font color='navy'>public class</font></b> Gson2Example {\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        Gson gson = <b><font color='navy'>new</font></b> Gson();\n
\n
        <b><font color='navy'>try</font></b> (Reader reader = <b><font color='navy'>new</font></b> FileReader(\"D:\\staff.json\")) {\n
\n
			// Convert JSON to Java Object\n
            Staff staff = gson.fromJson(reader, Staff.class);\n
            System.out.println(staff);\n
\n
			// Convert JSON to JsonElement, and later to String\n
            /*JsonElement json = gson.fromJson(reader, JsonElement.class);\n
            String jsonInString = gson.toJson(json);\n
            System.out.println(jsonInString);*/\n
\n
        } <b><font color='navy'>catch</font></b> (IOException e) {\n
            e.printStackTrace();\n
        }\n

    }\n

}\n
Output\n
\n
Staff{name=\'ABychek\', age=35, position=\'Founder\', salary=10000, skills=[java, python, shell]}\n\n
6. FAQs\n
Some commonly ask questions.\n
\n
6.1 Convert a JSON Array to a List, using TypeToken\n
\n
String json = \"[{\\"name\\":\\"ABychek\\"}, {\\"name\\":\\"laplap\\"}]\";\n
List&lt;Staff> list = gson.fromJson(json, <b><font color='navy'>new</font></b> TypeToken&lt;List&lt;Staff>>(){}.getType());\n
list.forEach(x -> System.out.println(x));\n
6.2 Convert a JSON to a Map\n

String json = \"{\\"name\\":\\"ABychek\\", \\"age\\":33}\";\n
Map&lt;String, Object> map = gson.fromJson(json, <b><font color='navy'>new</font></b> TypeToken&lt;Map&lt;String, Object>>(){}.getType());\n
map.forEach((x,y)-> System.out.println(\"key : \" + x + \" , value : \" + y));\n
		</string>


		<string name="GsonSimpleStreaming">
			Since Gson version 1.6, two new classes – JsonReader and JsonWriter, are introduce to provide streaming processing on JSON data. Read this Gson streaming documentation to understand what are the benefits of using it.\n
\n
Here we show you two full examples of using following Gson streaming APIs to read and write JSON data.\n
\n
JsonWriter – Streaming write to JSON.\n
JsonReader – Streaming read from JSON.\n
Gson streaming processing is fast, but difficult to code, because you need to handle each and every detail of processing JSON data.\n
\n
1. JsonWriter\n
In this example, you use \“JsonWriter\” to write JSON data into a file name \“file.json\“. See comments for self-expalantory.\n
\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> com.google.gson.stream.JsonWriter;\n
\n
<b><font color='navy'>public class</font></b> GsonStreamExample {\n
   <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
     JsonWriter writer;\n
     <b><font color='navy'>try</font></b> {\n
	writer = <b><font color='navy'>new</font></b> JsonWriter(new FileWriter(\"c:\\user.json\"));\n
\n
	writer.beginObject(); // {\n
	writer.name(\"name\").value(\"ABychek\"); // \"name\" : \"ABychek\"\n
	writer.name(\"age\").value(29); // \"age\" : 29\n
\n
	writer.name(\"messages\"); // \"messages\" :\n
	writer.beginArray(); // [\n
	writer.value(\"msg 1\"); // \"msg 1\"\n
	writer.value(\"msg 2\"); // \"msg 2\"\n
	writer.value(\"msg 3\"); // \"msg 3\"\n
	writer.endArray(); // ]\n
\n
	writer.endObject(); // }\n
	writer.close();\n
\n
	System.out.println(\"Done\");\n
\n
     } <b><font color='navy'>catch</font></b> (IOException e) {\n
	e.printStackTrace();\n
     }\n

   }\n

}\n
As result, following new file named \“file.json\” is created :\n
\n
{\n
	\"name\":\"ABychek\",\n
	\"age\":29,\n
	\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"]\n
}\n
\n

2. JsonReader\n
Example to use \“JsonReader\” to parse or read above file \“file.json\”.\n
\n
Token\n
In streaming mode, every JSON \“data\” is consider as an individual token. When you use JsonReader to process it, each tokens will be processed sequential.\n
For example,\n
\n
{\n
	\"url\":\"www.ABychek.com\"\n
}\n
Token 1 = \“{\”\n
Token 2 = \“url\”\n
Token 3 = \“www.ABychek.com\”\n
Token 4 = \“}”\n
\n
As result, you need to keep calling \“next****\” method to move to next token manually.\n
\n
See full example.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.core;\n
\n
<b><font color='navy'>import</font></b> java.io.FileNotFoundException;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> com.google.gson.stream.JsonReader;\n
\n
<b><font color='navy'>public class</font></b> GsonStreamExample {\n
   <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
     <b><font color='navy'>try</font></b> {\n
	JsonReader reader = <b><font color='navy'>new</font></b> JsonReader(new FileReader(\"c:\\user.json\"));\n
\n
	reader.beginObject();\n

	while (reader.hasNext()) {\n

	  String name = reader.nextName();\n

	  <b><font color='navy'>if</font></b> (name.equals(\"name\")) {\n

		System.out.println(reader.nextString());\n

	  } <b><font color='navy'>else</font></b> <b><font color='navy'>if</font></b> (name.equals(\"age\")) {\n

		System.out.println(reader.nextInt());\n

	  } <b><font color='navy'>else</font></b> <b><font color='navy'>if</font></b> (name.equals(\"message\")) {\n

		// read array\n
		reader.beginArray();\n

		while (reader.hasNext()) {\n
			System.out.println(reader.nextString());\n
		}\n

		reader.endArray();\n

	  } <b><font color='navy'>else</font></b> {\n
		reader.skipValue(); //avoid some unhandle events\n
	  }\n
        }\n

	reader.endObject();\n
	reader.close();\n
\n
     } <b><font color='navy'>catch</font></b> (FileNotFoundException e) {\n
	e.printStackTrace();\n
     } <b><font color='navy'>catch</font></b> (IOException e) {\n
	e.printStackTrace();\n
     }\n

   }\n

}\n
Output\n
\n
ABychek\n
29\n
msg 1\n
msg 2\n
msg 3\n
		</string>

	<string name="Gsonoutput">

		In this tutorial, we will show you how to enable pretty print JSON output in Gson framework.\n
\n
1. By default, Gson display the JSON output like the following :\n
\n
Gson gson = <b><font color='navy'>new</font></b> Gson();\n
String json = gson.toJson(someObj);\n
System.out.println(json);\n
Output\n
\n
{\"name\":\"ABychek",\"age\":35,\"position\":\"Founder\",\"salary\":10000,\"skills\":[\"java\",\"python\",\"shell\"]}\n
2. To enable the pretty-print, create the Gson object with GsonBuilder\n
\n
Gson gson = <b><font color='navy'>new</font></b> GsonBuilder().setPrettyPrinting().create();\n
String json = gson.toJson(obj);\n
System.out.println(json);\n
Output\n
\n
{\n
  \"name\": \"ABychek\",\n
  \"age\": 35,\n
  \"position\": \"Founder\",\n
  \"salary\": 10000,\n
  \"skills\": [\n
    \"java\",\n
    \"python\",\n
    \"shell\"\n
  ]\n
}\n
3. Full example.\n
\n
GsonExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.json;\n
\n
<b><font color='navy'>import</font></b> com.google.gson.Gson;\n
<b><font color='navy'>import</font></b> com.google.gson.GsonBuilder;\n
\n
<b><font color='navy'>import</font></b> java.math.BigDecimal;\n
<b><font color='navy'>import</font></b> java.util.ArrayList;\n
<b><font color='navy'>import</font></b> java.util.List;\n
\n
<b><font color='navy'>public class</font></b> GsonExample {\n
\n
    <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
        Staff staff = createDummyObject();\n
\n
        //Gson gson = <b><font color='navy'>new</font></b> Gson();\n
        Gson gson = <b><font color='navy'>new</font></b> GsonBuilder().setPrettyPrinting().create();\n
\n
        String json = gson.toJson(staff);\n
        System.out.println(json);\n

    }\n
\n
    private static Staff createDummyObject() {\n
\n
        Staff staff = <b><font color='navy'>new</font></b> Staff();\n

        staff.setName(\"ABychek\");\n
        staff.setAge(35);\n
        staff.setPosition(\"Founder\");\n
        staff.setSalary(new BigDecimal(\"10000\"));\n
\n
        List&lt;String> skills = <b><font color='navy'>new</font></b> ArrayList&lt;>();\n
        skills.add(\"java\");\n
        skills.add(\"python\");\n
        skills.add(\"shell\");\n

        staff.setSkills(skills);\n

        return staff;\n

    }\n

}\n
Output\n\n

{\n
  \"name\": \"ABychek\",\n
  \"age\": 35,\n
  \"position\": \"Founder\",\n
  \"salary\": 10000,\n
  \"skills\": [\n
    \"java\",\n
    \"python\",\n
    \"shell\"\n
  ]\n
}\n
	</string>



	<string name="JSONSimpleExample">
		In this tutorial, we show you how to use JSON.simple to read and write JSON data from / to a file.\n
\n
1. JSON.simple Dependency\n
JSON.simple is available at Maven central repository, just declares following dependency in your pom.xml file.\n
\n
	&lt;dependency>\n
	&lt;groupId>com.googlecode.json-simple&lt;/groupId>\n
	&lt;artifactId>json-simple&lt;/artifactId>\n
	&lt;version>1.1&lt;/version>\n
	&lt;/dependency>\n

 \n
2. Write JSON to file\n
In below example, it write JSON data via JSONObject and JSONArray, and save it into a file named \“test.json\“.\n
\n
<b><font color='navy'>import</font></b> java.io.FileWriter;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> org.json.simple.JSONArray;\n
<b><font color='navy'>import</font></b> org.json.simple.JSONObject;\n
\n
<b><font color='navy'>public class</font></b> JsonSimpleExample {\n
     <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	JSONObject obj = <b><font color='navy'>new</font></b> JSONObject();\n
	obj.put(\"name\", \"ABychek.com\");\n
	obj.put(\"age\", <b><font color='navy'>new</font></b> Integer(100));\n
\n
	JSONArray list = <b><font color='navy'>new</font></b> JSONArray();\n
	list.add(\"msg 1\");\n
	list.add(\"msg 2\");\n
	list.add(\"msg 3\");\n
\n
	obj.put(\"messages\", list);\n
\n
	<b><font color='navy'>try</font></b> {\n
\n
		FileWriter file = <b><font color='navy'>new</font></b> FileWriter(\"c:\\test.json\");\n
		file.write(obj.toJSONString());\n
		file.flush();\n
		file.close();\n

	} <b><font color='navy'>catch</font></b> (IOException e) {\n
		e.printStackTrace();\n
	}\n

	System.out.print(obj);\n

     }\n

}\n
Output – See content of file named \“test.json\“.\n
\n
{\n
	\"age\":100,\n
	\"name\":"ABychek.com",\n
	\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"]\n
}\n

 \n
3. Read JSON from file\n
Use JSONParser to read above generated JSON file \“test.json\“, and display each of the values.\n
\n
<b><font color='navy'>import</font></b> java.io.FileNotFoundException;\n
<b><font color='navy'>import</font></b> java.io.FileReader;\n
<b><font color='navy'>import</font></b> java.io.IOException;\n
<b><font color='navy'>import</font></b> java.util.Iterator;\n
<b><font color='navy'>import</font></b> org.json.simple.JSONArray;\n
<b><font color='navy'>import</font></b> org.json.simple.JSONObject;\n
<b><font color='navy'>import</font></b> org.json.simple.parser.JSONParser;\n
<b><font color='navy'>import</font></b> org.json.simple.parser.ParseException;\n
\n
<b><font color='navy'>public class</font></b> JsonSimpleExample {\n
     <b><font color='navy'>public static void</font></b> main(String[] args) {\n
\n
	JSONParser parser = <b><font color='navy'>new</font></b> JSONParser();\n
\n
	<b><font color='navy'>try</font></b> {\n

		Object obj = parser.parse(new FileReader(\"c:\\test.json\"));\n
\n
		JSONObject jsonObject = (JSONObject) obj;\n
\n
		String name = (String) jsonObject.get(\"name\");\n
		System.out.println(name);\n
\n
		long age = (Long) jsonObject.get(\"age\");\n
		System.out.println(age);\n
\n
		// loop array\n
		JSONArray msg = (JSONArray) jsonObject.get(\"messages\");\n
		Iterator&lt;String> iterator = msg.iterator();\n
		while (iterator.hasNext()) {\n
			System.out.println(iterator.next());\n
		}\n
\n
	} <b><font color='navy'>catch</font></b> (FileNotFoundException e) {\n
		e.printStackTrace();\n
	} <b><font color='navy'>catch</font></b> (IOException e) {\n
		e.printStackTrace();\n
	} <b><font color='navy'>catch</font></b> (ParseException e) {\n
		e.printStackTrace();\n
	}\n

     }\n

}\n
Output\n
\n
ABychek.com\n
100\n
msg 1\n
msg 2\n
msg 3\n

	</string>


	<string name="MySQL">

		1. Java JDBC connection example\n
Code snippets to use a JDBC driver to connect a MySQL database.\n
\n
Class.forName(\"com.mysql.jdbc.Driver\");\n
Connection conn = <b><font color='navy'>null</font></b>;\n
conn = DriverManager.getConnection(\"jdbc:mysql://hostname:port/dbname\",\"username\", \"password\");\n
conn.close();\n
See a complete example below :\n
\n
JDBCExample.java\n
<b><font color='navy'>package</font></b> com.ABychek.common;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCExample {\n
\n
  <b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
	System.out.println(\"-------- MySQL JDBC Connection Testing ------------\");\n
\n
	<b><font color='navy'>try</font></b> {\n
		Class.forName(\"com.mysql.jdbc.Driver\");\n
	} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
		System.out.println(\"Where is your MySQL JDBC Driver?\");\n
		e.printStackTrace();\n
		return;\n
	}\n
\n
	System.out.println(\"MySQL JDBC Driver Registered!\");\n
	Connection connection = <b><font color='navy'>null</font></b>;\n
\n
	<b><font color='navy'>try</font></b> {\n
		connection = DriverManager\n
		.getConnection(\"jdbc:mysql://localhost:3306/ABychekcom\",\"root\", \"password\");\n
\n
	} <b><font color='navy'>catch</font></b> (SQLException e) {\n
		System.out.println(\"Connection Failed! Check output console\");\n
		e.printStackTrace();\n
		return;\n
	}\n
\n
	<b><font color='navy'>if</font></b> (connection != <b><font color='navy'>null</font></b>) {\n
		System.out.println(\"You made it, take control your database now!\");\n
	} <b><font color='navy'>else</font></b> {\n
		System.out.println(\"Failed to make connection!\");\n
	}\n
  }\n
}\n

\n
2. Run it\n
Assume JDBCExample.java is store in c:\test folder, along with the MySQL JDBC driver\n
\n
C:\test>java -cp c:\test\mysql-connector-java-5.1.8-bin.jar;c:\test JDBCExample\n
-------- MySQL JDBC Connection Testing ------------\n
MySQL JDBC Driver Registered!\n
You made it, take control your database now!\n
\n
C:\test>\n
P.S To run this example, your need mysql-connector-java-{version}-bin.jar in your classpath.\n
\n
Done.\n


	</string>

	<string name="PostgreSQL">

		1. Download PostgreSQL JDBC Driver\n
Get a PostgreSQL JDBC driver at this URL : http://jdbc.postgresql.org/download.html\n
\n\n


2. Java JDBC connection example\n
Code snippets to use JDBC to connect a PostgreSQL database\n
\n
Class.forName(\"org.postgresql.Driver\");\n
Connection connection = <b><font color='navy'>null</font></b>;\n
connection = DriverManager.getConnection(\n
   \"jdbc:postgresql://hostname:port/dbname\",\"username\", \"password\");\n
connection.close();\n
See a complete example below :\n
File : JDBCExample.java\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCExample {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		System.out.println(\"-------- PostgreSQL \"\n
				+ \"JDBC Connection Testing ------------\");\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(\"org.postgresql.Driver\");\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(\"Where is your PostgreSQL JDBC Driver? \"\n
					+ \"Include in your library path!\");\n
			e.printStackTrace();\n
			return;\n
\n
		}\n

		System.out.println(\"PostgreSQL JDBC Driver Registered!\");\n
\n
		Connection connection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			connection = DriverManager.getConnection(\n
					\"jdbc:postgresql://127.0.0.1:5432/testdb\", \"ABychek\",\n
					\"123456\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(\"Connection Failed! Check output console\");\n
			e.printStackTrace();\n
			return;\n

		}\n

		<b><font color='navy'>if</font></b> (connection != <b><font color='navy'>null</font></b>) {\n
			System.out.println(\"You made it, take control your database now!\");\n
		} <b><font color='navy'>else</font></b> {\n
			System.out.println(\"Failed to make connection!\");\n
		}\n
	}\n

}\n
\n

3. Run it\n
Assume JDBCExample is store in c:\test folder, together with PostgreSQL JDBC driver, then run it :\n
\n
C:\test>java -cp c:\test\postgresql-8.3-603.jdbc4.jar;c:\test JDBCExample\n
-------- MySQL JDBC Connection Testing ------------\n
PostgreSQL JDBC Driver Registered!\n
You made it, take control your database now!\n
Done\n
	</string>

	<string name="OracleDB">

		Java JDBC connection example\n
Code snippets to use JDBC to connect a Oracle database.\n
\n
Class.forName(\"org.postgresql.Driver\");\n
Connection connection = <b><font color='navy'>null</font></b>;\n
connection = DriverManager.getConnection(\n
	\"jdbc:oracle:thin:@localhost:1521:ABychek\",\"username\",\"password\");\n
connection.close();\n
See a complete example below :\n
File : OracleJDBC.java\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> OracleJDBC {\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		System.out.println(\"-------- Oracle JDBC Connection Testing ------\");\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(\"Where is your Oracle JDBC Driver?\");\n
			e.printStackTrace();\n
			return;\n

		}\n
\n
		System.out.println(\"Oracle JDBC Driver Registered!\");\n
\n
		Connection connection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			connection = DriverManager.getConnection(\n
					\"jdbc:oracle:thin:@localhost:1521:ABychek\", \"username\",\n
					\"password\");\n

		} <b><font color='navy'>catch</font></b> (SQLException e) {\n

			System.out.println(\"Connection Failed! Check output console\");\n
			e.printStackTrace();\n
			return;\n
\n
		}\n

		<b><font color='navy'>if</font></b> (connection != <b><font color='navy'>null</font></b>) {\n
			System.out.println(\"You made it, take control your database now!\");\n
		} <b><font color='navy'>else</font></b> {\n
			System.out.println(\"Failed to make connection!\");\n
		}\n
	}\n

}\n


2. Run it\n
Assume OracleJDBC.java is store in \“C:\jdbc-test\” folder, together with Oracle JDBC driver (ojdbc6.jar), then run following commands :\n
\n
C:\jdbc-test>javac OracleJDBC.java\n
\n
C:\jdbc-test>java -cp c:\jdbc-test\ojdbc6.jar;c:\jdbc-test OracleJDBC\n
-------- Oracle JDBC Connection Testing ------------\n
Oracle JDBC Driver Registered!\n
You made it, take control your database now!\n
\n
C:\jdbc-test>\n
	</string>

	<string name="STMNCreateTable">

		Here\’s an example to show you how to create a table in database via JDBC statement. To issue a create statement, calls the Statement.execute() method like this :\n
\n
Statement statement = dbConnection.createStatement();\n
// execute create SQL stetement\n
statement.execute(createTableSQL);\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
\n
<b><font color='navy'>public class</font></b> JDBCStatementCreateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			createDbUserTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n
\n
	<b><font color='navy'>private static void</font></b> createDbUserTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String createTableSQL = \"CREATE TABLE DBUSER(\"\n
				+ \"USER_ID NUMBER(5) NOT NULL, \"\n
				+ \"USERNAME VARCHAR(20) NOT NULL, \"\n
				+ \"CREATED_BY VARCHAR(20) NOT NULL, \"\n
				+ \"CREATED_DATE DATE NOT NULL, " + "PRIMARY KEY (USER_ID) \"\n
				+ \")\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			System.out.println(createTableSQL);\n
                        // execute the SQL stetement\n
			statement.execute(createTableSQL);\n
\n
			System.out.println(\"Table \\"dbuser\\" is created!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n

			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n
\n
	<b><font color='navy'>private static</font></b> Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
					DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n
\n
	}\n
\n
}\n
Result\n
Here’s the result.\n
\n
CREATE TABLE DBUSER(\n
  USER_ID NUMBER(5) NOT NULL,\n
  USERNAME VARCHAR(20) NOT NULL,\n
  CREATED_BY VARCHAR(20) NOT NULL,\n
  CREATED_DATE DATE NOT NULL,\n
  PRIMARY KEY (USER_ID)\n
)\n
Table \"user\" is created!\n
	</string>

	<string name="STMNInsertRecord">

		Here\’s an example to show you how to insert a record into table via JDBC statement. To issue a insert statement, calls the Statement.executeUpdate() method like this :\n
\n
Statement statement = dbConnection.createStatement();\n
// execute the insert SQL stetement\n
statement.executeUpdate(insertTableSQL);\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
<b><font color='navy'>import</font></b> java.text.DateFormat;\n
<b><font color='navy'>import</font></b> java.text.SimpleDateFormat;\n
\n
<b><font color='navy'>public class</font></b> JDBCStatementInsertExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
	<b><font color='navy'>private static final</font></b> DateFormat dateFormat = <b><font color='navy'>new</font></b> SimpleDateFormat(\n
			\"yyyy/MM/dd HH:mm:ss\");\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			insertRecordIntoDbUserTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

	}\n

	<b><font color='navy'>private static void</font></b> insertRecordIntoDbUserTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String insertTableSQL = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) \" + \"VALUES\"\n
				+ \"(1,\'ABychek\',\'system\', \" + \"to_date(\'\"\n
				+ getCurrentTimeStamp() + \"\', \'yyyy/mm/dd hh24:mi:ss\'))\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			System.out.println(insertTableSQL);\n
\n
			// execute insert SQL stetement\n
			statement.executeUpdate(insertTableSQL);\n
\n
			System.out.println(\"Record is inserted into DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                               DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

		return dbConnection;\n

	}\n

	<b><font color='navy'>private static</font></b>String getCurrentTimeStamp() {\n
\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return dateFormat.format(today.getTime());\n
\n
	}\n

}\n
Result\n\n
A record is inserted into a table named \“DBUSER\”.\n
\n
INSERT INTO DBUSER(USER_ID, USERNAME, CREATED_BY, CREATED_DATE)\n
VALUES(1,\'ABychek\',\'system\', to_date(\'2011/04/04 13:59:03\', \'yyyy/mm/dd hh24:mi:ss\'))\n
Record is inserted into DBUSER table!\n
	</string>

	<string name="STMNUpdateRecord">

		Here\’s an example to show you how to update a record in a table via JDBC statement. To issue a update statement, calls the Statement.executeUpdate() method like this :\n
\n
Statement statement = dbConnection.createStatement();\n
// execute the update SQL stetement\n
statement.executeUpdate(updateTableSQL);\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
\n
<b><font color='navy'>public class</font></b> JDBCStatementUpdateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			updateRecordIntoDbUserTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

	}\n

	<b><font color='navy'>private static void</font></b> updateRecordIntoDbUserTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String updateTableSQL = \"UPDATE DBUSER\"\n
				+ \" SET USERNAME = \'ABychek_new\' \"\n
				+ \" WHERE USER_ID = 1\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			System.out.println(updateTableSQL);\n
\n
			// execute update SQL stetement\n
			statement.execute(updateTableSQL);\n
\n
			System.out.println(\"Record is updated to DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                              DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n

	}\n

}\n
Result\n\n
The username of \“user_id = 1\” is updated to a <b><font color='navy'>new</font></b> value \‘ABychek_new\’.\n
\n
UPDATE DBUSER SET USERNAME = \'ABychek_new\'  WHERE USER_ID = 1\n
Record is updated into DBUSER table!\n
	</string>

	<string name="STMNDeleteRecord">

		Here\’s an example to show you how to delete a record from a table via JDBC statement. To issue a delete statement, calls the Statement.executeUpdate() method like this :\n
\n
Statement statement = dbConnection.createStatement();\n
// execute the delete SQL stetement\n
statement.executeUpdate(deleteTableSQL);\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
\n
<b><font color='navy'>public class</font></b> JDBCStatementDeleteExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			deleteRecordFromDbUserTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> deleteRecordFromDbUserTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String deleteTableSQL = \"DELETE DBUSER WHERE USER_ID = 1\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			System.out.println(deleteTableSQL);\n
\n
			// execute delete SQL stetement\n
			statement.execute(deleteTableSQL);\n
\n
			System.out.println(\"Record is deleted from DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n
\n
	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                             DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n

	}\n

}\n
Result\n\n
A record with \“user_id=1\” is deleted from table.\n
\n
DELETE DBUSER WHERE USER_ID = 1\n
Record is deleted from DBUSER table!\n
	</string>
	
	<string name="STMNSelectListRecords">
		Here\’s an example to show you how to select the entire records from table via JDBC statement, and display all the records via a ResultSet object. To issue a select query, calls the Statement.executeQuery method like this :\n
\n
String selectTableSQL = \"SELECT USER_ID, USERNAME from DBUSER\";\n
Statement statement = dbConnection.createStatement();\n
ResultSet rs = statement.executeQuery(selectTableSQL);\n
while (rs.next()) {\n
	String userid = rs.getString(\"USER_ID\");\n
	String username = rs.getString(\"USERNAME\");\n
}\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.ResultSet;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
\n
<b><font color='navy'>public class</font></b> JDBCStatementSelectExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			selectRecordsFromDbUserTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

	}\n

	<b><font color='navy'>private static void</font></b> selectRecordsFromDbUserTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String selectTableSQL = \"SELECT USER_ID, USERNAME from DBUSER\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			System.out.println(selectTableSQL);\n
\n
			// execute select SQL stetement\n
			ResultSet rs = statement.executeQuery(selectTableSQL);\n
\n
			while (rs.next()) {\n
\n
				String userid = rs.getString(\"USER_ID\");\n
				String username = rs.getString(\"USERNAME\");\n
\n
				System.out.println(\"userid : \" + userid);\n
				System.out.println(\"username : \" + username);\n
\n
			}\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n
\n
	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(DB_CONNECTION, DB_USER,\n
					DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n
\n
	}\n
\n
}\n
Result\n\n
A list of the records are retrieved from table \“DBUSER\” and displayed.\n
	</string>

	<string name="STMNBatchUpdate">
		Here\’s an example to show you how to insert few records in batch process, via JDBC Statement.\n
\n
dbConnection.setAutoCommit(false);\n
\n
statement = dbConnection.createStatement();\n
statement.addBatch(insertTableSQL1);\n
statement.addBatch(insertTableSQL2);\n
statement.addBatch(insertTableSQL3);\n
\n
statement.executeBatch();\n
\n
dbConnection.commit();\n
Note\n
Batch Update is not limit to Insert statement, it\’s apply for Update and Delete statement as well.\n
See full JDBC batch update example …\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.sql.Statement;\n
<b><font color='navy'>import</font></b> java.text.DateFormat;\n
<b><font color='navy'>import</font></b> java.text.SimpleDateFormat;\n
\n
<b><font color='navy'>public class</font></b> JDBCBatchUpdateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
	<b><font color='navy'>private static final</font></b> DateFormat dateFormat = <b><font color='navy'>new</font></b> SimpleDateFormat(\n
			\"yyyy/MM/dd HH:mm:ss\");\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			batchInsertRecordsIntoTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

	}\n

	<b><font color='navy'>private static void</font></b> batchInsertRecordsIntoTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		Statement statement = <b><font color='navy'>null</font></b>;\n
\n
		String insertTableSQL1 = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) \" + \"VALUES\"\n
				+ \"(101,\'ABychek\',\'system\', \" + \"to_date(\'\"\n
				+ getCurrentTimeStamp() + \"\', \'yyyy/mm/dd hh24:mi:ss\'))\";\n
\n
		String insertTableSQL2 = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) \" + \"VALUES\"\n
				+ \"(102,\'ABychek\',\'system\', " + \"to_date(\'\"\n
				+ getCurrentTimeStamp() + \"\', \'yyyy/mm/dd hh24:mi:ss\'))\";\n
\n
		String insertTableSQL3 = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) \" + \"VALUES\"\n
				+ \"(103,\'ABychek\',\'system\', \" + \"to_date(\'\"\n
				+ getCurrentTimeStamp() + \"\', \'yyyy/mm/dd hh24:mi:ss\'))\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			statement = dbConnection.createStatement();\n
\n
			dbConnection.setAutoCommit(false);\n
\n
			statement.addBatch(insertTableSQL1);\n
			statement.addBatch(insertTableSQL2);\n
			statement.addBatch(insertTableSQL3);\n
\n
			statement.executeBatch();\n
\n
			dbConnection.commit();\n
\n
			System.out.println(\"Records are inserted into DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (statement != <b><font color='navy'>null</font></b>) {\n
				statement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n
\n
		}\n
\n
	}\n
\n
	private static Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
				DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n
\n
	}\n
\n
	<b><font color='navy'>private static</font></b>String getCurrentTimeStamp() {\n
\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return dateFormat.format(today.getTime());\n
\n
	}\n

}\n
Result\n\n
3 records are inserted into database via batch update process.\n
\n
\n

Why need to use Batch Update?\n
The above batch update is same with normal executeUpdate() method like this :\n
\n
statement.executeUpdate(insertTableSQL1);\n
statement.executeUpdate(insertTableSQL2);\n
statement.executeUpdate(insertTableSQL3);\n
But batch update has performance benefit if you want to insert many records, because executeBatch() reduces the number of JDBC calls to database.\n
	</string>

	<string name="PSSTMNCreateTable">
		Here\’s an example to show you how to create a table in database via JDBC PrepareStatement. To issue a create statement, calls the PrepareStatement.executeUpdate() method like this :\n
\n
PreparedStatement preparedStatement = dbConnection.prepareStatement(createTableSQL);\n
// execute create SQL stetement\n
preparedStatement.executeUpdate();\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCPreparedStatementCreateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			createTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> createTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String createTableSQL = \"CREATE TABLE DBUSER1(\"\n
				+ \"USER_ID NUMBER(5) NOT NULL, \"\n
				+ \"USERNAME VARCHAR(20) NOT NULL, \"\n
				+ \"CREATED_BY VARCHAR(20) NOT NULL, \"\n
				+ \"CREATED_DATE DATE NOT NULL, \" + \"PRIMARY KEY (USER_ID) \"\n
				+ \")\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(createTableSQL);\n
\n
			System.out.println(createTableSQL);\n
\n
			// execute create SQL stetement\n
			preparedStatement.executeUpdate();\n
\n
			System.out.println(\"Table \\"dbuser\\" is created!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                            DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

		return dbConnection;\n

	}\n

}\n\n
Result\n
A table named \“DBUSER\” is created.\n
\n
CREATE TABLE DBUSER(\n
   USER_ID NUMBER(5) NOT NULL,\n
   USERNAME VARCHAR(20) NOT NULL,\n
   CREATED_BY VARCHAR(20) NOT NULL,\n
   CREATED_DATE DATE NOT NULL,\n
   PRIMARY KEY (USER_ID)\n
)\n
Table \"dbuser\" is created!\n
	</string>

	<string name="PSSTMNInsertRecord">
		Here\’s an example to show you how to insert a record into table via JDBC PreparedStatement. To issue an insert statement, calls the PreparedStatement.executeUpdate() method like this :\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
		+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
		+ \"(?,?,?,?)\";\n
PreparedStatement preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatement.setInt(1, 11);\n
preparedStatement.setString(2, \"ABychek\");\n
preparedStatement.setString(3, \"system\");\n
preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
// execute insert SQL stetement\n
preparedStatement .executeUpdate();\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
<b><font color='navy'>import</font></b> java.text.DateFormat;\n
<b><font color='navy'>import</font></b> java.text.SimpleDateFormat;\n
\n
<b><font color='navy'>public class</font></b> JDBCPreparedStatementInsertExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			insertRecordIntoTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> insertRecordIntoTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String insertTableSQL = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
				+ \"(?,?,?,?)\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
\n
			preparedStatement.setInt(1, 11);\n
			preparedStatement.setString(2, \"ABychek\");\n
			preparedStatement.setString(3, \"system\");\n
			preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
\n
			// execute insert SQL stetement\n
			preparedStatement.executeUpdate();\n
\n
			System.out.println(\"Record is inserted into DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n
\n
	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                            DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		return dbConnection;\n
\n
	}\n

	private static java.sql.Timestamp getCurrentTimeStamp() {\n
\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return <b><font color='navy'>new</font></b> java.sql.Timestamp(today.getTime());\n

	}\n

}\n\n
Result\n
A record is inserted into a table named \“DBUSER\”.\n

	</string>

	<string name="PSSTMNUpdateRecord">
		Here\’s an example to show you how to update a record in table via JDBC PreparedStatement. To issue a update statement, calls the PreparedStatement.executeUpdate() method like this :\n
\n
String updateTableSQL = \"UPDATE DBUSER SET USERNAME = ? WHERE USER_ID = ?\";\n
PreparedStatement preparedStatement = dbConnection.prepareStatement(updateTableSQL);\n
preparedStatement.setString(1, \"ABychek_new_value\");\n
preparedStatement.setInt(2, 1001);\n
// execute insert SQL stetement\n
preparedStatement .executeUpdate();\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCPreparedStatementUpdateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			updateRecordToTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

	}\n

	<b><font color='navy'>private static void</font></b> updateRecordToTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String updateTableSQL = \"UPDATE DBUSER SET USERNAME = ? \"\n
				                  + \" WHERE USER_ID = ?\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(updateTableSQL);\n
\n
			preparedStatement.setString(1, \"ABychek_new_value\");\n
			preparedStatement.setInt(2, 1001);\n
\n
			// execute update SQL stetement\n
			preparedStatement.executeUpdate();\n
\n
			System.out.println(\"Record is updated to DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	private static Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                            DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

		return dbConnection;\n

	}\n

}\n
Result\n\n
The username of \“user_id = 1001\” is updated to a new value \‘ABychek_new_value\’.\n
	</string>

	<string name="PSSTMNDeleteRecord">
		Here\’s an example to show you how to delete a record from a table via JDBC PreparedStatement. To issue a delete statement, calls the PreparedStatement.executeUpdate() method like this :\n
\n
String deleteSQL = \"DELETE DBUSER WHERE USER_ID = ?\";\n
PreparedStatement preparedStatement = dbConnection.prepareStatement(deleteSQL);\n
preparedStatement.setInt(1, 1001);\n
// execute delete SQL stetement\n
preparedStatement.executeUpdate();\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCPreparedStatementSelectExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			deleteRecordFromTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> deleteRecordFromTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String deleteSQL = \"DELETE DBUSER WHERE USER_ID = ?\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(deleteSQL);\n
			preparedStatement.setInt(1, 1001);\n
\n
			// execute delete SQL stetement\n
			preparedStatement.executeUpdate();\n
\n
			System.out.println(\"Record is deleted!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                            DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n

	}\n

}\n
Result\n\n
A record with \“user_id=1001\″ is deleted from table.\n
	</string>

	<string name="PSSTMNSelectListRecords">
		Here\’s an example to show you how to select records from table via JDBC PreparedStatement, and display the records via a ResultSet object. To issue a select query, calls the PreparedStatement.executeQuery() method like this :\n
\n
String selectSQL = \"SELECT USER_ID, USERNAME FROM DBUSER WHERE USER_ID = ?\";\n
PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);\n
preparedStatement.setInt(1, 1001);\n
ResultSet rs = preparedStatement.executeQuery(selectSQL );\n
while (rs.next()) {\n
	String userid = rs.getString(\"USER_ID\");\n
	String username = rs.getString(\"USERNAME\");\n
}\n
Full example…\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.ResultSet;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCPreparedStatementSelectExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			selectRecordsFromTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n
\n
	<b><font color='navy'>private static void</font></b> selectRecordsFromTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String selectSQL = \"SELECT USER_ID, USERNAME FROM DBUSER WHERE USER_ID = ?\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(selectSQL);\n
			preparedStatement.setInt(1, 1001);\n
\n
			// execute select SQL stetement\n
			ResultSet rs = preparedStatement.executeQuery();\n
\n
			while (rs.next()) {\n
\n
				String userid = rs.getString(\"USER_ID\");\n
				String username = rs.getString(\"USERNAME\");\n
\n
				System.out.println(\"userid : \" + userid);\n
				System.out.println(\"username : \" + username);\n

			}\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n

			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                             DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n

		return dbConnection;\n

	}\n

}\n
Result\n\n
List of the records with \“user_id = 1001\” are retrieved from table \“DBUSER\” and displayed.\n
	</string>


	<string name="PSSTMNBatchUpdate">
		Here\’s an example to show you how to insert few records in batch process, via JDBC PreparedStatement.\n
\n
dbConnection.setAutoCommit(false);//commit trasaction manually\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
			+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
			+ \"(?,?,?,?)\";\n
PreparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
\n
preparedStatement.setInt(1, 101);\n
preparedStatement.setString(2, \"ABychek101\");\n
preparedStatement.setString(3, \"system\");\n
preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatement.addBatch();\n
\n
preparedStatement.setInt(1, 102);\n
preparedStatement.setString(2, \"ABychek102\");\n
preparedStatement.setString(3, \"system\");\n
preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatement.addBatch();\n
preparedStatement.executeBatch();\n
\n
dbConnection.commit();\n
Note\n
Batch Update is not limit to Insert statement, it\’s apply for Update and Delete statement as well.\n
See full JDBC batch update example …\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCBatchUpdateExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			batchInsertRecordsIntoTable();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> batchInsertRecordsIntoTable() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatement = <b><font color='navy'>null</font></b>;\n
\n
		String insertTableSQL = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
				+ \"(?,?,?,?)\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
\n
			dbConnection.setAutoCommit(false);\n
\n
			preparedStatement.setInt(1, 101);\n
			preparedStatement.setString(2, \"ABychek101\");\n
			preparedStatement.setString(3, \"system\");\n
			preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
			preparedStatement.addBatch();\n
\n
			preparedStatement.setInt(1, 102);\n
			preparedStatement.setString(2, \"ABychek102\");\n
			preparedStatement.setString(3, \"system\");\n
			preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
			preparedStatement.addBatch();\n
\n
			preparedStatement.setInt(1, 103);\n
			preparedStatement.setString(2, \"ABychek103\");\n
			preparedStatement.setString(3, \"system\");\n
			preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
			preparedStatement.addBatch();\n
\n
			preparedStatement.executeBatch();\n
\n
			dbConnection.commit();\n
\n
			System.out.println(\"Record is inserted into DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
			dbConnection.rollback();\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatement != <b><font color='navy'>null</font></b>) {\n
				preparedStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	private static Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
                              DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		}\n
\n
		return dbConnection;\n

	}\n

	private static java.sql.Timestamp getCurrentTimeStamp() {\n
\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return <b><font color='navy'>new</font></b> java.sql.Timestamp(today.getTime());\n

	}\n

}\n
Result\n\n
3 records are inserted into database via batch update process.\n
\n
\n

Why need to use Batch Update?\n
Alternatively, you can use normal executeUpdate() method like this :\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
				+ \"(?,?,?,?)\";\n
PreparpreparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
\n
preparedStatement.setInt(1, 111);\n
preparedStatement.setString(2, \"ABychek101\");\n
preparedStatement.setString(3, \"system\");\n
preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatement.executeUpdate();\n
\n
preparedStatement.setInt(1, 112);\n
preparedStatement.setString(2, \"ABychek102\");\n
preparedStatement.setString(3, \"system\");\n
preparedStatement.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatement.executeUpdate();\n
The above code snippet is works as well, but has performance issue if you are try to insert many records, let say 1000 records, because every executeUpdate() will hits database once. For batch update process, it hits database when executeBatch() is called.\n
	</string>

	<string name="StoredProcedureIN">
		Code snippets to show you how to call a Oracle stored procedure via JDBC CallableStatement, and how to pass IN parameters from Java to stored procedure.\n
\n
//insertDBUSER is stored procedure\n
String insertStoreProc = \"{call insertDBUSER(?,?,?,?)}\";\n
callableStatement = dbConnection.prepareCall(insertStoreProc);\n
callableStatement.setInt(1, 1000);\n
callableStatement.setString(2, \"ABychek\");\n
callableStatement.setString(3, \"system\");\n
callableStatement.setDate(4, getCurrentDate());\n
callableStatement.executeUpdate();\n
JDBC CallableStatement Example\n
See a full JDBC CallableStatement example.\n

\n
\n
1. Stored Procedure\n\n
A stored procedure in Oracle database. Later, calls it via JDBC.\n
\n
CREATE OR REPLACE PROCEDURE insertDBUSER(\n
	   p_userid IN DBUSER.USER_ID TYPE,\n
	   p_username IN DBUSER.USERNAME TYPE,\n
	   p_createdby IN DBUSER.CREATED_BY TYPE,\n
	   p_date IN DBUSER.CREATED_DATE TYPE)\n
IS\n
BEGIN\n
\n
  INSERT INTO DBUSER (\"USER_ID\", \"USERNAME\", \"CREATED_BY\", \"CREATED_DATE\")\n
  VALUES (p_userid, p_username,p_createdby, p_date);\n
\n
  COMMIT;\n
\n
END;\n
/\n
\n

2. Calls Stored Procedure via CallableStatement\n\n
JDBC example to call stored procedure via CallableStatement.\n
\n
File : JDBCCallableStatementINParameterExample.java\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.CallableStatement;\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCCallableStatementINParameterExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			callOracleStoredProcINParameter();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> callOracleStoredProcINParameter() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		CallableStatement callableStatement = <b><font color='navy'>null</font></b>;\n
\n
		String insertStoreProc = \"{call insertDBUSER(?,?,?,?)}\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			callableStatement = dbConnection.prepareCall(insertStoreProc);\n
\n
			callableStatement.setInt(1, 1000);\n
			callableStatement.setString(2, \"ABychek\");\n
			callableStatement.setString(3, \"system\");\n
			callableStatement.setDate(4, getCurrentDate());\n
\n
			// execute insertDBUSER store procedure\n
			callableStatement.executeUpdate();\n
\n
			System.out.println(\"Record is inserted into DBUSER table!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (callableStatement != <b><font color='navy'>null</font></b>) {\n
				callableStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
				DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		return dbConnection;\n

	}\n

	<b><font color='navy'>private static</font></b>java.sql.Date getCurrentDate() {\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return <b><font color='navy'>new</font></b> java.sql.Date(today.getTime());\n
	}\n

}\n
Done. When above JDBC example is executed, a new record will be inserted into database via stored procedure \“insertDBUSER\“.\n
	</string>

	<string name="StoredProcedureOUT">
		For stored procedure returns OUT parameters, it must be\n
\n
Registered via JDBC CallableStatement.registerOutParameter(index,sqlType).\n
Get it back via CallableStatement.getDataType(index).\n
See code snippets\n
\n
//getDBUSERByUserId is a stored procedure\n
String getDBUSERByUserIdSql = \"{call getDBUSERByUserId(?,?,?,?)}\";\n
callableStatement = dbConnection.prepareCall(getDBUSERByUserIdSql);\n
callableStatement.setInt(1, 10);\n
callableStatement.registerOutParameter(2, java.sql.Types.VARCHAR);\n
callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);\n
callableStatement.registerOutParameter(4, java.sql.Types.DATE);\n
\n
// execute getDBUSERByUserId store procedure\n
callableStatement.executeUpdate();\n
\n
String userName = callableStatement.getString(2);\n
String createdBy = callableStatement.getString(3);\n
Date createdDate = callableStatement.getDate(4);\n
JDBC CallableStatement Example\n
See a full JDBC CallableStatement example for OUT parameter.\n
\n
\n

1. Stored Procedure\n\n
A stored procedure in Oracle database, with IN and OUT parameters. Later, calls it via JDBC.\n
\n
CREATE OR REPLACE PROCEDURE getDBUSERByUserId(\n
	   p_userid IN DBUSER.USER_ID TYPE,\n
	   o_username OUT DBUSER.USERNAME TYPE,\n
	   o_createdby OUT  DBUSER.CREATED_BY TYPE,\n
	   o_date OUT DBUSER.CREATED_DATE TYPE)\n
IS\n
BEGIN\n
\n
  SELECT USERNAME , CREATED_BY, CREATED_DATE\n
  INTO o_username, o_createdby,  o_date\n
  from  DBUSER WHERE USER_ID = p_userid;\n
\n
END;\n
/\n
\n

2. Calls Stored Procedure via CallableStatement\n
JDBC example to call a stored procedure via CallableStatement.\n
\n
File : JDBCCallableStatementOUTParameterExample.java\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.CallableStatement;\n
<b><font color='navy'>import</font></b> java.sql.Date;\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCCallableStatementOUTParameterExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			callOracleStoredProcOUTParameter();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> callOracleStoredProcOUTParameter() <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		CallableStatement callableStatement = <b><font color='navy'>null</font></b>;\n
\n
		String getDBUSERByUserIdSql = \"{call getDBUSERByUserId(?,?,?,?)}\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			callableStatement = dbConnection.prepareCall(getDBUSERByUserIdSql);\n
\n
			callableStatement.setInt(1, 10);\n
			callableStatement.registerOutParameter(2, java.sql.Types.VARCHAR);\n
			callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);\n
			callableStatement.registerOutParameter(4, java.sql.Types.DATE);\n
\n
			// execute getDBUSERByUserId store procedure\n
			callableStatement.executeUpdate();\n
\n
			String userName = callableStatement.getString(2);\n
			String createdBy = callableStatement.getString(3);\n
			Date createdDate = callableStatement.getDate(4);\n
\n
			System.out.println(\"UserName : \" + userName);\n
			System.out.println(\"CreatedBy : \" + createdBy);\n
			System.out.println(\"CreatedDate : \" + createdDate);\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (callableStatement != <b><font color='navy'>null</font></b>) {\n
				callableStatement.close();\n
			}\n

			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
				DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		return dbConnection;\n

	}\n

}\n
Done.\n
	</string>

	<string name="StoredProcedureCURSOR">
		For Oracle stored procedure returns CURSOR parameter, you can\n
\n
Registered via JDBC CallableStatement.registerOutParameter(index,OracleTypes.CURSOR).\n
Get it back via callableStatement.getObject(index).\n
See code snippets\n
\n
//getDBUSERCursor is a stored procedure\n
String getDBUSERCursorSql = \"{call getDBUSERCursor(?,?)}\";\n
callableStatement = dbConnection.prepareCall(getDBUSERCursorSql);\n
callableStatement.setString(1, \"ABychek\");\n
callableStatement.registerOutParameter(2, OracleTypes.CURSOR);\n
\n
// execute getDBUSERCursor store procedure\n
callableStatement.executeUpdate();\n
\n
// get cursor and cast it to ResultSet\n
rs = (ResultSet) callableStatement.getObject(2);\n
\n
// loop it like normal\n
while (rs.next()) {\n
	String userid = rs.getString(\"USER_ID\");\n
	String userName = rs.getString(\"USERNAME\");\n
}\n
JDBC CallableStatement CURSOR Example\n
See a full JDBC CallableStatement example for OUT CURSOR parameter.\n
\n

\n
1. Stored Procedure\n
A Oracle stored procedure, with one IN and one OUT CURSOR parameter. Later, calls it via JDBC.\n
\n
CREATE OR REPLACE PROCEDURE getDBUSERCursor(\n
	   p_username IN DBUSER.USERNAME TYPE,\n
	   c_dbuser OUT SYS_REFCURSOR)\n
IS\n
BEGIN\n
\n
  OPEN c_dbuser FOR\n
  SELECT * FROM DBUSER WHERE USERNAME LIKE p_username || \'percentSimbol\';\n
\n
END;\n
/\n

\n
2. Calls Stored Procedure via CallableStatement\n
JDBC example to call above stored procedure, cast the returned CURSOR to ResultSet and loop through the records sequentially.\n
\n
File : JDBCCallableStatementCURSORExample.java\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.CallableStatement;\n
<b><font color='navy'>import</font></b> java.sql.Date;\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.ResultSet;\n
<b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>import</font></b> oracle.jdbc.OracleTypes;\n
\n
<b><font color='navy'>public class</font></b> JDBCCallableStatementCURSORExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) {\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			callOracleStoredProcCURSORParameter();\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

	}\n

	<b><font color='navy'>private static void</font></b> callOracleStoredProcCURSORParameter()\n
			<b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		CallableStatement callableStatement = <b><font color='navy'>null</font></b>;\n
		ResultSet rs = <b><font color='navy'>null</font></b>;\n
\n
		String getDBUSERCursorSql = \"{call getDBUSERCursor(?,?)}\";
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
			callableStatement = dbConnection.prepareCall(getDBUSERCursorSql);\n
\n
			callableStatement.setString(1, \"ABychek\");\n
			callableStatement.registerOutParameter(2, OracleTypes.CURSOR);\n
\n
			// execute getDBUSERCursor store procedure\n
			callableStatement.executeUpdate();\n
\n
			// get cursor and cast it to ResultSet\n
			rs = (ResultSet) callableStatement.getObject(2);\n
\n
			while (rs.next()) {\n
				String userid = rs.getString(\"USER_ID\");\n
				String userName = rs.getString(\"USERNAME\");\n
				String createdBy = rs.getString(\"CREATED_BY\");\n
				String createdDate = rs.getString(\"CREATED_DATE\");\n
\n
				System.out.println(\"UserName : \" + userid);\n
				System.out.println(\"UserName : \" + userName);\n
				System.out.println(\"CreatedBy : \" + createdBy);\n
				System.out.println(\"CreatedDate : \" + createdDate);\n
			}\n

		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (rs != <b><font color='navy'>null</font></b>) {\n
				rs.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (callableStatement != <b><font color='navy'>null</font></b>) {\n
				callableStatement.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n
\n
		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(\n
				DB_CONNECTION, DB_USER,DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

		return dbConnection;\n

	}\n

}\n
Done.\n
	</string>

	\n<string name="TransaqExample">
		JDBC Transaction let you control how and when a transaction should commit into database.\n
\n
//transaction block start\n
\n
//SQL insert statement\n
//SQL update statement\n
//SQL delete statement\n
\n
//transaction block end\n
In simple, JDBC transaction make sure SQL statements within a transaction block are all executed successful, if either one of the SQL statement within transaction block is failed, abort and rollback everything within the transaction block.\n
\n
See below two examples to understand how JDBC transaction works.\n
\n
1. Without JDBC Transaction\n
By default, data will be committed into database when executeUpdate() is called.
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
			+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
			+ \"(?,?,?,?)\";\n
\n
String updateTableSQL = \"UPDATE DBUSER SET USERNAME =? \"\n
			+ \"WHERE USER_ID = ?\";\n
\n
preparedStatementInsert = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatementInsert.setInt(1, 999);\n
preparedStatementInsert.setString(2, \"ABychek101\");\n
preparedStatementInsert.setString(3, \"system\");\n
preparedStatementInsert.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatementInsert.executeUpdate(); //data COMMITTED into database.\n
\n
preparedStatementUpdate = dbConnection.prepareStatement(updateTableSQL);\n
preparedStatementUpdate.setString(1, \"A very very long string caused DATABASE ERROR\");\n
preparedStatementUpdate.setInt(2, 999);\n
\n
preparedStatementUpdate.executeUpdate(); //Error, value too big,  ignore this update statement,\n
                                                //but user_id=999 is inserted\n
When this code is executed, the USER_ID = \‘999\’ is inserted but the username is not update.\n
\n

 \n
2. With JDBC Transaction\n
To put this in a transaction, you can use\n
\n
dbConnection.setAutoCommit(false); to start a transaction block.\n
dbConnection.commit(); to end a transaction block.\n
See code snippets :\n
\n
dbConnection.setAutoCommit(false); //transaction block start\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
			+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
			+ \"(?,?,?,?)\";\n
\n
String updateTableSQL = \"UPDATE DBUSER SET USERNAME =? \"\n
			+ \"WHERE USER_ID = ?\";\n
\n
preparedStatementInsert = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatementInsert.setInt(1, 999);\n
preparedStatementInsert.setString(2, \"ABychek101\");\n
preparedStatementInsert.setString(3, \"system\");\n
preparedStatementInsert.setTimestamp(4, getCurrentTimeStamp());\n
preparedStatementInsert.executeUpdate(); //data IS NOT commit yet\n
\n
preparedStatementUpdate = dbConnection.prepareStatement(updateTableSQL);\n
preparedStatementUpdate.setString(1, \"A very very long string caused DATABASE ERROR\");\n
preparedStatementUpdate.setInt(2, 999);\n
preparedStatementUpdate.executeUpdate(); //Error, rollback, including the first insert statement.\n
\n
dbConnection.commit(); //transaction block end\n
When this code is executed, update statement is hits error, and make both insert and update statements rollback together.\n
\n
\n

Full JDBC Transaction example\n
See a complete JDBC transaction example.\n
\n
<b><font color='navy'>package</font></b> com.ABychek.jdbc;\n
\n
<b><font color='navy'>import</font></b> java.sql.DriverManager;\n
<b><font color='navy'>import</font></b> java.sql.Connection;\n
<b><font color='navy'>import</font></b> java.sql.PreparedStatement;\n
<b><font color='navy'>import</font></b><b><font color='navy'>import</font></b> java.sql.SQLException;\n
\n
<b><font color='navy'>public class</font></b> JDBCTransactionExample {\n
\n
	<b><font color='navy'>private static final</font></b> String DB_DRIVER = \"oracle.jdbc.driver.OracleDriver\";\n
	<b><font color='navy'>private static final</font></b> String DB_CONNECTION = \"jdbc:oracle:thin:@localhost:1521:ABychek\";\n
	<b><font color='navy'>private static final</font></b> String DB_USER = \"user\";\n
	<b><font color='navy'>private static final</font></b> String DB_PASSWORD = \"password\";\n
\n
	<b><font color='navy'>public static void</font></b> main(String[] argv) <b><font color='navy'>throws</font></b> SQLException {\n
\n
		Connection dbConnection = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatementInsert = <b><font color='navy'>null</font></b>;\n
		PreparedStatement preparedStatementUpdate = <b><font color='navy'>null</font></b>;\n
\n
		String insertTableSQL = \"INSERT INTO DBUSER\"\n
				+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
				+ \"(?,?,?,?)\";\n
\n
		String updateTableSQL = \"UPDATE DBUSER SET USERNAME =? \"\n
				+ \"WHERE USER_ID = ?\";\n
\n
		<b><font color='navy'>try</font></b> {\n
			dbConnection = getDBConnection();\n
\n
			dbConnection.setAutoCommit(false);\n
\n
			preparedStatementInsert = dbConnection.prepareStatement(insertTableSQL);\n
			preparedStatementInsert.setInt(1, 999);\n
			preparedStatementInsert.setString(2, \"ABychekABychek101\");\n
			preparedStatementInsert.setString(3, \"system\");\n
			preparedStatementInsert.setTimestamp(4, getCurrentTimeStamp());\n
			preparedStatementInsert.executeUpdate();\n
\n
			preparedStatementUpdate = dbConnection.prepareStatement(updateTableSQL);\n
			// preparedStatementUpdate.setString(1,\n
			// \"A very very long string caused db error\");\n
			preparedStatementUpdate.setString(1, \"new string\");\n
			preparedStatementUpdate.setInt(2, 999);\n
			preparedStatementUpdate.executeUpdate();\n
\n
			dbConnection.commit();\n
\n
			System.out.println(\"Done!\");\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n
			dbConnection.rollback();\n
\n
		} <b><font color='navy'>finally</font></b> {\n
\n
			<b><font color='navy'>if</font></b> (preparedStatementInsert != <b><font color='navy'>null</font></b>) {\n
				preparedStatementInsert.close();\n
			}\n
\n
			<b><font color='navy'>if</font></b> (preparedStatementUpdate != <b><font color='navy'>null</font></b>) {\n
				preparedStatementUpdate.close();\n
			}\n

			<b><font color='navy'>if</font></b> (dbConnection != <b><font color='navy'>null</font></b>) {\n
				dbConnection.close();\n
			}\n

		}\n

	}\n

	<b><font color='navy'>private static</font></b>Connection getDBConnection() {\n

		Connection dbConnection = <b><font color='navy'>null</font></b>;\n

		<b><font color='navy'>try</font></b> {\n
\n
			Class.forName(DB_DRIVER);\n
\n
		} <b><font color='navy'>catch</font></b> (ClassNotFoundException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

		<b><font color='navy'>try</font></b> {\n
\n
			dbConnection = DriverManager.getConnection(DB_CONNECTION, DB_USER,\n
					DB_PASSWORD);\n
			return dbConnection;\n
\n
		} <b><font color='navy'>catch</font></b> (SQLException e) {\n
\n
			System.out.println(e.getMessage());\n

		}\n

		return dbConnection;\n

	}\n

	<b><font color='navy'>private static</font></b>java.sql.Timestamp getCurrentTimeStamp() {\n
\n
		java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
		return <b><font color='navy'>new</font></b> java.sql.Timestamp(today.getTime());\n

	}\n

}\n
	</string>

	<string name="InsertTimestampValueInPreparedStatement">
		Problem\n
A simple table script in Oracle database.\n
\n
CREATE TABLE DBUSER (\n
  USER_ID       NUMBER (5)    NOT NULL,\n
  USERNAME      VARCHAR2 (20)  NOT NULL,\n
  CREATED_BY    VARCHAR2 (20)  NOT NULL,\n
  CREATED_DATE  DATE          NOT NULL,\n
  PRIMARY KEY ( USER_ID )\n
 )\n
No idea how to insert a timestamp value, e.g. \“04/04/2011 14:45:04\” into \“CREATED_DATE\” field, via JDBC PreparedStatement.\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
		+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
		+ \"(?,?,?,?)\";\n
preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatement.setTimestamp(4,???);\n
\n
 \n
Solution\n
Create a method to return current timestamp(java.sql.Timestamp) like this :\n
\n
<b><font color='navy'>private static</font></b>java.sql.Timestamp getCurrentTimeStamp() {\n
\n
	java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
	return <b><font color='navy'>new</font></b> java.sql.Timestamp(today.getTime());\n

}\n
And set the timestamp via preparedStatement.setTimestamp().\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
	+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
	+ \"(?,?,?,?)\";\n
preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatement.setTimestamp(4,getCurrentTimeStamp());\n
	</string>

	<string name="InsertDateValueInPreparedStatement">
Problem\n
A simple table script in Oracle database.\n
\n
CREATE TABLE DBUSER (\n
  USER_ID       NUMBER (5)    NOT NULL,\n
  USERNAME      VARCHAR2 (20)  NOT NULL,\n
  CREATED_BY    VARCHAR2 (20)  NOT NULL,\n
  CREATED_DATE  DATE          NOT NULL,\n
  PRIMARY KEY ( USER_ID )\n
 )\n
No idea how to insert current date value, e.g. \“04/04/2011\” into \“CREATED_DATE\” field, via JDBC PreparedStatement.\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
		+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
		+ \"(?,?,?,?)\";\n
preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatement.setDate(4, ???);\n
\n
 \n
Solution\n
The \“preparedStatement.setDate()\” method is accept a java.sql.Date parameter, so, you have to convert from java.util.Date to java.sql.Date.\n
\n
For example, create a method to return current date, and convert it java.sql.Date :\n
\n
<b><font color='navy'>private static</font></b>java.sql.Date getCurrentDate() {\n
    java.util.Date today = <b><font color='navy'>new</font></b> java.util.Date();\n
    return <b><font color='navy'>new</font></b> java.sql.Date(today.getTime());\n
}\n
And set the returned date via preparedStatement.setDate().\n
\n
String insertTableSQL = \"INSERT INTO DBUSER\"\n
	+ \"(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES\"\n
	+ \"(?,?,?,?)\";\n
preparedStatement = dbConnection.prepareStatement(insertTableSQL);\n
preparedStatement.setDate(4, getCurrentDate());\n
Done.\n
	</string>

<string name="AboutPage">
\n
	It Simple Samples of Code\n
	It open source project. You can check it out on: \n
	<b>\"https://github.com/bychok300/android_codeSampler\"</b>\n
	\n
	You may mail me if you found some bugs or have some ideas about project\n
	\n
	<b>bychok300@gmail.com</b>

</string>


</resources>
